<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Open source software for official statistics – istio</title><link>https://sdmx.io/tags/istio/</link><description>Recent content in istio on Open source software for official statistics</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2022 BIS All Rights Reserved</copyright><lastBuildDate>Wed, 29 Jun 2022 11:27:49 +0800</lastBuildDate><atom:link href="https://sdmx.io/tags/istio/index.xml" rel="self" type="application/rss+xml"/><item><title>Why would you need SPIRE for authentication with Istio?</title><link>https://sdmx.io/blog/why-istio-need-spire/</link><pubDate>Wed, 29 Jun 2022 11:27:49 +0800</pubDate><guid>https://sdmx.io/blog/why-istio-need-spire/</guid><description>
&lt;p>&lt;a href="https://istio.io/latest/news/releases/1.14.x/announcing-1.14/" title="Istio 1.14" target="_blank" rel="noopener">Istio 1.14&lt;/a>
was released in June of this year, and one of the most notable features of this release is support for &lt;a href="https://spiffe.io/docs/latest/spire-about/" title="SPIRE" target="_blank" rel="noopener">SPIRE&lt;/a>
, which is one of the implementations of &lt;a href="https://spiffe.io/" title="SPIFFE" target="_blank" rel="noopener">SPIFFE&lt;/a>
, a CNCF incubation project. This article explains what SPIRE means for zero-trust architectures and why you would need SPIRE for authentication in Istio.&lt;/p>
&lt;h2 id="authentication-in-kubernetes">Authentication in Kubernetes&lt;/h2>
&lt;p>We all know that Istio was built for and typically runs on Kubernetes, so before we talk about how to use SPIRE for authentication in Istio, let’s take a look at how Kubernetes handles authentication.&lt;/p>
&lt;p>Let’s look at an example of a pod’s token. Whenever a pod gets created in Kubernetes, it gets assigned a default service account from the namespace, assuming we didn’t explicitly assign a service account to it. Here is an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apiVersion: v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ca.crt: &lt;span class="o">{&lt;/span>CA_CRT&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> namespace: &lt;span class="nv">ZGVmYXVsdA&lt;/span>&lt;span class="o">==&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> token: &lt;span class="o">{&lt;/span>TOKEN_STRING&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind: Secret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">metadata:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> annotations:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kubernetes.io/service-account.name: sleep
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kubernetes.io/service-account.uid: 2c0d00e8-13a2-48d0-9ff8-f987f3325ecf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> creationTimestamp: &lt;span class="s2">&amp;#34;2022-06-14T03:01:35Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: sleep-token-gwhwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> namespace: default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> resourceVersion: &lt;span class="s2">&amp;#34;244535398&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uid: b8822ceb-9553-4a17-96dc-d525bbaed0e0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type: kubernetes.io/service-account-token
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Kubernetes manages the identity of Pods with Service Accounts and then specifies the permissions of Pods with a Service Account to the Kubernetes API using RBAC. A service account’s token is stored in a secret, which does not include a declaration of the node or pod where the workload is running. When a malicious actor steals a token, they gain full access to the account and can steal information or carry out sabotage under the guise of that user.&lt;/p>
&lt;p>A token can only be used to identify a workload in one cluster, but Istio supports multiple clusters and meshes, as well as Kubernetes environments and virtual machines. A unified workload identity standard can help here.&lt;/p>
&lt;h2 id="an-introduction-to-spiffe-and-spire">An Introduction to SPIFFE and SPIRE&lt;/h2>
&lt;p>SPIFFE’s (Secure Production Identity Framework for Everyone) goal is to create a zero-trust, fully-identified data center network by establishing an open, unified workload identity standard based on the concept of zero-trust. SPIRE can rotate X.509 SVID certificates and secret keys on a regular basis. Based on administrator-defined policies, SPIRE can dynamically provision workload certificates and Istio can consume them. I’ll go over some of the terms associated with SPIFFE in a little more detail below.&lt;/p>
&lt;p>SPIRE (SPIFFE Runtime Environment) is a SPIFFE implementation that is ready for production. SVID (SPIFFE Verifiable Identity Document) is the document that a workload uses to prove its identity to a resource or caller. SVID contains a SPIFFE ID that represents the service’s identity. It uses an X.509 certificate or a JWT token to encode the SPIFFE ID in a cryptographically verifiable document. The SPIFFE ID is a URI that looks like this: &lt;code>spiffe://trust_domain/workload_identifier&lt;/code>.&lt;/p>
&lt;h2 id="spiffe-and-zero-trust-security">SPIFFE and Zero Trust Security&lt;/h2>
&lt;p>The essence of Zero Trust is identity-centric dynamic access control. SPIFFE addresses the problem of identifying workloads.&lt;/p>
&lt;p>We might identify a workload using an IP address and port in the era of virtual machines, but IP address-based identification is vulnerable to multiple services sharing an IP address, IP address forgery, and oversized access control lists. Because containers have a short lifecycle in the Kubernetes era, instead of an IP address, we rely on a pod or service name. However, different clouds and software platforms approach workload identity differently, and there are compatibility issues. This is especially true in heterogeneous hybrid clouds, where workloads run on both virtual machines and Kubernetes. It is critical to establish a fine-grained, interoperable identification system at this point.&lt;/p>
&lt;h2 id="using-spire-for-authentication-in-istio">Using SPIRE for Authentication in Istio&lt;/h2>
&lt;p>With the introduction of SPIRE to Istio, we can give each workload a unique identity, which is used by workloads in the service mesh for peer authentication, request authentication, and authorization policies. The SPIRE Agent issues SVIDs for workloads by communicating with a shared UNIX Domain Socket in the workload. The Envoy proxy and the SPIRE agent communicate through the Envoy SDS (Secret Discovery Service) API. Whenever an Envoy proxy needs to access secrets (certificates, keys, or anything else needed to do secure communication), it will talk to the SPIRE agent through Envoy’s SDS API.&lt;/p>
&lt;p>The most significant advantage of SDS is the ease with which certificates can be managed. Without this feature, certificates would have to be created as a secret and then mounted into the agent container in a Kubernetes deployment. The secret must be updated, and the proxy container must be re-deployed if the certificate expires. Using SDS, Istio can push the certificates to all Envoy instances in the service mesh. If the certificate expires, the server only needs to push the new certificate to the Envoy instance; Envoy will use the new certificate right away, and the proxy container will not need to be re-deployed.&lt;/p>
&lt;p>The architecture of using SPIRE for authentication in Istio is depicted in the diagram below.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/why-istio-need-spire/spire-istio-arch.jpg" data-img="/blog/why-istio-need-spire/spire-istio-arch.jpg" data-width="1200" data-height="965" alt="spire-istio-arch.jpg" data-caption="SPIRE Architecture with Istio">
&lt;figcaption>SPIRE Architecture with Istio&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Use StatefulSet resources to deploy the SPIRE Server and Kubernetes Workload Registrar in the spire namespace of the Kubernetes cluster, and DaemonSet resources to deploy a SPIRE Agent for each node. Assuming that you used the default DNS name &lt;code>cluster.local&lt;/code> when you install Kubernetes, &lt;a href="https://github.com/spiffe/spire/blob/main/support/k8s/k8s-workload-registrar/README.md" title="Kubernetes Workload Registrar" target="_blank" rel="noopener">Kubernetes Workload Registrar&lt;/a>
creates identities for the workloads in the Istio mesh in the following format:&lt;/p>
&lt;ul>
&lt;li>SPRRE Server：&lt;code>spiffe://cluster.local/ns/spire/sa/server&lt;/code>&lt;/li>
&lt;li>SPIRE Agent：&lt;code>spiffe://cluster.local/ns/spire/sa/spire-agent&lt;/code>&lt;/li>
&lt;li>Kubernetes Node：&lt;code>spiffe://cluster.local/k8s-workload-registrar/demo-cluster/node/&lt;/code>&lt;/li>
&lt;li>Kubernetes Workload Pod：&lt;code>spiffe://cluster.local/{namespace}/spire/sa/{service_acount}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This way, both the nodes and each workload have their own globally unique identity and can be scaled according to the cluster (trust domain).&lt;/p>
&lt;p>The workload authentication process in Istio mesh is shown in the figure below.&lt;/p>
&lt;figure class="mx-auto text-center">
&lt;img src="istio-workload-attestor.jpg" loading="lazy" decoding="async"
alt="The workload authentication process in the Istio mesh" width="30%"data-img="istio-workload-attestor.jpg"
data-caption="Image"
data-width="796"
data-height="1300"
/>&lt;figcaption>
The workload authentication process in the Istio mesh
&lt;/figcaption>
&lt;/figure>
&lt;p>The detailed process is as follows:&lt;/p>
&lt;ol>
&lt;li>The pilot-agent in the sidecar of the workload calls the SPIRE agent via the shared UDS to get the SVID.&lt;/li>
&lt;li>SPIRE Agent asks Kubernetes (kubelet on the node to be precise) for information about the workload.&lt;/li>
&lt;li>The kubelet returns the information queries from the Kubernetes API server to the workload attestor.&lt;/li>
&lt;li>The attestor compares the results returned by the kubelet with the identity information shared by the sidecar.&lt;/li>
&lt;li>If they match, returns the SVID to the workload and caches it, if not, the attestation failed.&lt;/li>
&lt;/ol>
&lt;p>Please refer to the &lt;a href="https://istio.io/latest/docs/ops/integrations/spire" title="Istio documentation" target="_blank" rel="noopener">Istio documentation&lt;/a>
to learn how to use SPIRE for authentication in Istio.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>SPIFFE unifies identity standards in heterogeneous environments, which is the foundation of zero-trust networks. In Istio, whether we use SPIRE or not, authentication is not perceptible to workloads. By using SPIRE to provide authentication for workloads, we can effectively manage workload identity and lay the foundation for a zero-trust network.&lt;/p></description></item><item><title>In-Depth Understanding of Istio: Announcing the Publication of a New Istio Book</title><link>https://sdmx.io/blog/istio-service-mesh-book/</link><pubDate>Wed, 15 Jun 2022 20:27:49 +0800</pubDate><guid>https://sdmx.io/blog/istio-service-mesh-book/</guid><description>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-service-mesh-book/book.jpg" data-img="/blog/istio-service-mesh-book/book.jpg" data-width="1200" data-height="800" alt="book.jpg" data-caption="">
&lt;figcaption>&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>It&amp;rsquo;s been more than 5 years since Google, IBM, and Lyft unveiled the Istio open source project in May 2017. The Istio project has developed from a seed to a tall tree in these years. Many domestic books on the Istio service mesh were launched in the two years following the release of Istio 1.0 in 2018. My country is at the forefront of the world in the field of Istio book publishing.&lt;/p>
&lt;h2 id="service-mesh-one-of-the-core-technologies-of-cloud-native">Service mesh: one of the core technologies of cloud native&lt;/h2>
&lt;p>Today, Istio is nearly synonymous with service mesh in China. The development of service mesh, as one of the core cloud-native technologies described by CNCF (Cloud Native Computing Foundation), has gone through the following stages.&lt;/p>
&lt;ul>
&lt;li>2017-2018: Exploratory Phase&lt;/li>
&lt;li>2019-2020: Early Adopter Phase&lt;/li>
&lt;li>2021 to present: Implementation on a large scale and ecological development stage&lt;/li>
&lt;/ul>
&lt;p>Cloud native technology enables enterprises to design and deploy elastically scalable applications in new dynamic settings such as public, private, and hybrid clouds, according to the CNCF. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs are examples of cloud native technology.&lt;/p>
&lt;p>Service mesh has been included to the CNCF definition of cloud native, indicating that it is one of the representative technologies of cloud native. Google is donating Istio to CNCF today, and we have reason to expect that as a CNCF project, Istio&amp;rsquo;s community will be more open, and its future development will be more smooth.&lt;/p>
&lt;h2 id="service-mesh-and-cloud-native-applications">Service mesh and cloud native applications&lt;/h2>
&lt;p>Cloud-native development is gaining traction. Despite the frequent emergence of new technologies and products, service mesh has maintained its place as &amp;ldquo;cloud-native network infrastructure&amp;rdquo; as part of the overall cloud-native technology stack throughout the past year. The cloud-native technology stack model is depicted in the diagram below, with representative technologies for each layer to define the standard. Service mesh and other cloud-native technologies complement each other as a new era of middleware emerges. Dapr (Distributed Application Runtime) defines the cloud-native middleware capability model, OAM defines the cloud-native application model, and so on, whereas service mesh Lattice defines a cloud-native seven-layer network model.&lt;/p>
&lt;figure class="mx-auto text-center">
&lt;img src="model.jpg" loading="lazy" decoding="async"
alt="Cloud Native Application Model" width="80%"data-img="model.jpg"
data-caption="Cloud Native Application Model"
data-width="1200"
data-height="1104"
/>&lt;figcaption>
Cloud Native Application Model
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="why-you-need-a-service-mesh">Why you need a service mesh&lt;/h2>
&lt;p>Using a service mesh isn&amp;rsquo;t tantamount to abandoning Kubernetes; it just makes sense. The goal of Kubernetes is to manage application lifecycles through declarative configuration, whereas the goal of service mesh is to provide traffic control, security management, and observability amongst apps. How do you set up load balancing and flow management for calls between services after a robust microservice platform has been developed with Kubernetes?&lt;/p>
&lt;p>Many open source tools, including Istio, Linkerd, MOSN, and others, support Envoy&amp;rsquo;s xDS protocol. The specification of xDS is Envoy&amp;rsquo;s most significant contribution to service mesh or cloud native. Many various usage cases, such as API gateways, sidecar proxies in service meshes, and edge proxies, are derived from Envoy, which is simply a network proxy, a modern version of the proxy configured through the API.&lt;/p>
&lt;p>In a nutshell, the move from Kubernetes to Istio was made for the following reasons.&lt;/p>
&lt;ul>
&lt;li>Application life cycle management, specifically application deployment and management, is at the heart of Kubernetes (scaling, automatic recovery, and release).&lt;/li>
&lt;li>Kubernetes is a microservices deployment and management platform that is scalable and extremely elastic.&lt;/li>
&lt;li>Transparent proxy is the cornerstone of service mesh, which intercepts communication between microservices via sidecar proxy and then regulates microservice behavior via control plane settings. The deployment mode of service meshes has introduced new issues today. For service meshes, sidecar is no longer required, and an agentless service mesh based on gRPC is also being tested.&lt;/li>
&lt;li>xDS is a protocol standard for configuring service meshes, and a gRPC-based xDS is currently being developed.&lt;/li>
&lt;li>Kubernetes traffic management is decoupled with the service mesh. The kube-proxy component is not required to support traffic within the service mesh. The traffic between services is controlled by an abstraction close to the microservice application layer to achieve security and observability features.&lt;/li>
&lt;li>In Kubernetes, service mesh is an upper-level abstraction of service, and Serverless is the next stage, which is why Google released Knative based on Kubernetes and Istio following Istio.&lt;/li>
&lt;/ul>
&lt;h2 id="open-source-in-the-name-of-the-community">Open source in the name of the community&lt;/h2>
&lt;p>The ServiceMesher community was founded in May 2018 with the help of Ant Financial. Following that, a tornado of service meshes erupted in China, and the community-led translation of Istio&amp;rsquo;s official documentation reached a fever pitch.&lt;/p>
&lt;p>I became aware of a dearth of Chinese resources for systematically teaching Istio over time, so in September 2018, I began to plan and create an Istio book, launching the Istio Handbook open source e-book project on GitHub. I met many friends who are also interested in Istio and service mesh technology in the online and offline events of the community a few months later, with the promotion of service mesh technology and the expansion of the ServiceMesher community. We unanimously agreed to collaborate on an open source Istio e-book, which will compile the community&amp;rsquo;s important writings and experience into a logical text and make it available to the majority of developers.&lt;/p>
&lt;p>Hundreds of people volunteered and began co-authoring the book in March 2019 under the auspices of the Community Stewardship Council. In May 2020, we created a cloud-native community that incorporated the original ServiceMesher community in order to further promote cloud-native technology and expand the technical knowledge supplied by the community. The scope of community operations has also widened, moving away from service mesh to more extensive cloud-native tools.&lt;/p>
&lt;p>The editorial board for this book, which includes me, Ma Ruofei, Wang Baiping, Wang Wei, Luo Guangming, Zhao Huabing, Zhong Hua, and Guo Xudong, was founded in October 2020. We performed further version updates, improvements, and optimizations to this book under the supervision and assistance of the publishing business. This book, &amp;ldquo;In-depth Understanding of Isito: Advanced Practice of Cloud Native Service Mesh,&amp;rdquo; finally met you after many iterations.&lt;/p>
&lt;figure class="mx-auto text-center">
&lt;img src="cover.jpg" loading="lazy" decoding="async"
alt="The book cover" width="70%"data-img="cover.jpg"
data-caption="cover"
data-width="1200"
data-height="1569"
/>&lt;figcaption>
The book cover
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="about-this-book">About this book&lt;/h2>
&lt;p>After version 1.5, Istio underwent considerable architectural modifications, and various new or better features were added, including the addition of a smart DNS proxy, additional resource objects, increased support for virtual machines, and more.&lt;/p>
&lt;p>This book is based on the new edition of Istio, and it aims to provide readers with the most up-to-date and comprehensive content possible by following the newest trends in the Istio community. Furthermore, several of the book&amp;rsquo;s authors are front-line development or operation and maintenance engineers with extensive Istio expertise, offering detailed and useful reference cases for the book.&lt;/p>
&lt;p>This book is currently available on the &lt;a href="https://item.jd.com/13200745.html" title="JD.com" target="_blank" rel="noopener">JD.com&lt;/a>
. Please read &amp;ldquo;In-depth Understanding of Isito: Advanced Practice of Cloud Native Service Mesh&amp;rdquo; if you want to learn more about Istio!&lt;/p>
&lt;figure class="mx-auto text-center">
&lt;a href="https://item.jd.com/13200745.html">&lt;img src="qrcode.jpg" loading="lazy" decoding="async" width="30%"data-img="qrcode.jpg"
data-caption="Buy now"
data-width="400"
data-height="401"
/>&lt;/a>&lt;figcaption>
&lt;p>&lt;a href="https://item.jd.com/13200745.html" title="Buy now" target="_blank" rel="noopener">Buy now&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure></description></item><item><title>How to build Istio?</title><link>https://sdmx.io/blog/how-to-build-istio/</link><pubDate>Sun, 15 May 2022 14:18:40 +0800</pubDate><guid>https://sdmx.io/blog/how-to-build-istio/</guid><description>
&lt;p>This article will guide you on how to compile the Istio binaries and Docker images on macOS.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;/h2>
&lt;p>Before we start, refer to the &lt;a href="https://github.com/istio/istio/wiki/Preparing-for-Development-Mac" title="Istio Wiki" target="_blank" rel="noopener">Istio Wiki&lt;/a>
, here is the information about my build environment.&lt;/p>
&lt;ul>
&lt;li>macOS 12.3.1 Darwin AMD64&lt;/li>
&lt;li>Docker Desktop 4.8.1(78998)&lt;/li>
&lt;li>Docker Engine v20.10.14&lt;/li>
&lt;/ul>
&lt;h2 id="start-to-compile">Start to compile&lt;/h2>
&lt;p>First, download the &lt;a href="https://github.com/istio/istio" title="Istio code" target="_blank" rel="noopener">Istio code&lt;/a>
from GitHub to the &lt;code>$GOPATH/src/istio.io/istio&lt;/code> directory, and execute the commands below in that root directory.&lt;/p>
&lt;h3 id="compile-into-binaries">Compile into binaries&lt;/h3>
&lt;p>Execute the following command to download the Istio dependent packages, which will be downloaded to the &lt;code>vendor&lt;/code> directory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">go mod vendor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run the following command to build Istio:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo make build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you do not run the command with &lt;code>sudo&lt;/code>, you may encounter the following error.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">fatal: unsafe repository &lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;/work&amp;#39;&lt;/span> is owned by someone &lt;span class="k">else&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To add an exception &lt;span class="k">for&lt;/span> this directory, call:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global --add safe.directory /work
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fatal: unsafe repository &lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;/work&amp;#39;&lt;/span> is owned by someone &lt;span class="k">else&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To add an exception &lt;span class="k">for&lt;/span> this directory, call:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global --add safe.directory /work
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Makefile.core.mk:170: *** &lt;span class="s2">&amp;#34;TAG cannot be empty&amp;#34;&lt;/span>. Stop.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make: *** &lt;span class="o">[&lt;/span>build&lt;span class="o">]&lt;/span> Error &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even if you follow the prompts and run &lt;code>git config --global --add safe.directory /work&lt;/code>, you will still get errors during compilation.&lt;/p>
&lt;p>The compiled binary will be saved in &lt;code>out&lt;/code> directory with the following directory structure.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">out
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── darwin_amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── bug-report
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── client
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── envoy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── extauthz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── install-cni
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── istio-cni
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── istio-cni-taint
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── istio-iptables
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── istio_is_init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── istioctl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── logs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── operator
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── pilot-agent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── pilot-discovery
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── linux_amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── envoy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── envoy-centos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── logs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── release
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It will build both the &lt;code>linux_amd64&lt;/code> and &lt;code>darwin_amd64&lt;/code> architectures binaries at the same time.&lt;/p>
&lt;h3 id="compile-into-docker-images">Compile into Docker images&lt;/h3>
&lt;p>Run the following command to compile Istio into a Docker image.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo make build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compilation will take about 3 to 5 minutes depending on your network. Once the compilation is complete, you will see the Docker image of Istio by running the following command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ docker images
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">REPOSITORY TAG IMAGE ID CREATED SIZE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/app_sidecar_centos_7 latest 2044037df94b &lt;span class="m">51&lt;/span> seconds ago 524MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/app_sidecar_ubuntu_jammy latest 5d8ae5ed55b7 About a minute ago 362MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/proxyv2 latest d4679412385f About a minute ago 243MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/install-cni latest 78f46d5771d2 About a minute ago 270MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/istioctl latest c38130a5adc8 About a minute ago 190MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/pilot latest 2aa9185ec202 About a minute ago 190MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/app latest 473adafaeb8d About a minute ago 188MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/operator latest 9ac1fedcdd12 About a minute ago 191MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/ext-authz latest 1fb5aaf20791 About a minute ago 117MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/app_sidecar_debian_11 latest 61376a02b95d &lt;span class="m">2&lt;/span> minutes ago 407MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost:5000/app_sidecar_ubuntu_xenial latest 7e8efe666611 &lt;span class="m">2&lt;/span> minutes ago 418MB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can change the image name and push it into your own container registry.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>This is how to build Istio on macOS. If you have already downloaded the Docker image you need to build, the build will take less than a minute. It also takes only a few minutes to build Docker images.&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/istio/istio/wiki/Using-the-Code-Base" title="Using the Code Base - github.com" target="_blank" rel="noopener">Using the Code Base - github.com&lt;/a>
&lt;/li>
&lt;/ul></description></item><item><title>Sidecar injection, transparent traffic hijacking , and routing process in Istio explained in detail</title><link>https://sdmx.io/blog/sidecar-injection-iptables-and-traffic-routing/</link><pubDate>Thu, 12 May 2022 21:08:59 +0800</pubDate><guid>https://sdmx.io/blog/sidecar-injection-iptables-and-traffic-routing/</guid><description>
&lt;p>Updated on May 6, 2022&lt;/p>
&lt;p>Based on Istio version 1.13, this article will present the following.&lt;/p>
&lt;ul>
&lt;li>What is the sidecar pattern and what advantages does it have?&lt;/li>
&lt;li>How are the sidecar injections done in Istio?&lt;/li>
&lt;li>How does the sidecar proxy do transparent traffic hijacking?&lt;/li>
&lt;li>How is the traffic routed to upstream?&lt;/li>
&lt;/ul>
&lt;p>The figure below shows how the &lt;code>productpage&lt;/code> service requests access to &lt;code>http://reviews.default.svc.cluster.local:9080/&lt;/code> and how the sidecar proxy inside the reviews service does traffic blocking and routing forwarding when traffic goes inside the &lt;code>reviews&lt;/code> service.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/sidecar-injection-iptables-and-traffic-routing/istio-iptables.svg" data-img="/blog/sidecar-injection-iptables-and-traffic-routing/istio-iptables.svg" alt="istio-iptables.svg" data-caption="Istio transparent traffic hijacking and traffic routing diagram">
&lt;figcaption>Istio transparent traffic hijacking and traffic routing diagram&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>At the beginning of the first step, the sidecar in the &lt;code>productpage&lt;/code> pod has selected a pod of the reviews service to be requested via EDS, knows its IP address, and sends a TCP connection request.&lt;/p>
&lt;p>There are three versions of the reviews service, each with an instance, and the sidecar work steps in the three versions are similar, as illustrated below only by the sidecar traffic forwarding step in one of the Pods.&lt;/p>
&lt;h2 id="sidecar-pattern">Sidecar pattern&lt;/h2>
&lt;p>Dividing the functionality of an application into separate processes running in the same minimal scheduling unit (e.g. Pod in Kubernetes) can be considered sidecar mode. As shown in the figure below, the sidecar pattern allows you to add more features next to your application without additional third-party component configuration or modifications to the application code.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/sidecar-injection-iptables-and-traffic-routing/sidecar-pattern.svg" data-img="/blog/sidecar-injection-iptables-and-traffic-routing/sidecar-pattern.svg" alt="sidecar-pattern.svg" data-caption="Sidecar pattern">
&lt;figcaption>Sidecar pattern&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>The Sidecar application is loosely coupled to the main application. It can shield the differences between different programming languages and unify the functions of microservices such as observability, monitoring, logging, configuration, circuit breaker, etc.&lt;/p>
&lt;h3 id="advantages-of-using-the-sidecar-pattern">Advantages of using the Sidecar pattern&lt;/h3>
&lt;p>When deploying a service mesh using the sidecar model, there is no need to run an agent on the node, but multiple copies of the same sidecar will run in the cluster. In the sidecar deployment model, a companion container (such as Envoy or MOSN) is deployed next to each application&amp;rsquo;s container, which is called a sidecar container. The sidecar takes overall traffic in and out of the application container. In Kubernetes&amp;rsquo; Pod, a sidecar container is injected next to the original application container, and the two containers share storage, networking, and other resources.&lt;/p>
&lt;p>Due to its unique deployment architecture, the sidecar model offers the following advantages.&lt;/p>
&lt;ul>
&lt;li>Abstracting functions unrelated to application business logic into a common infrastructure reduces the complexity of microservice code.&lt;/li>
&lt;li>Reduce code duplication in microservices architectures because it is no longer necessary to write the same third-party component profiles and code.&lt;/li>
&lt;li>The sidecar can be independently upgraded to reduce the coupling of application code to the underlying platform.&lt;/li>
&lt;/ul>
&lt;h2 id="iptables-manipulation-analysis">iptables manipulation analysis&lt;/h2>
&lt;p>In order to view the iptables configuration, we need to &lt;code>nsente&lt;/code>r the sidecar container using the root user to view it, because &lt;code>kubectl&lt;/code> cannot use privileged mode to remotely manipulate the docker container, so we need to log on to the host where the &lt;code>productpage&lt;/code> pod is located.&lt;/p>
&lt;p>If you use Kubernetes deployed by minikube, you can log directly into the minikube&amp;rsquo;s virtual machine and switch to root. View the iptables configuration that lists all the rules for the NAT (Network Address Translation) table because the mode for redirecting inbound traffic to the sidecar is &lt;code>REDIRECT&lt;/code> in the parameters passed to the &lt;code>istio-iptables&lt;/code> when the Init container is selected for the startup, so there will only be NAT table specifications in the iptables and mangle table configurations if TPROXY is selected. See the iptables command for detailed usage.&lt;/p>
&lt;p>We only look at the iptables rules related to &lt;code>productpage&lt;/code> below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># login to minikube, change user to root&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ minikube ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo -i
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># See the processes in the productpage pod&amp;#39;s istio-proxy container&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ docker top &lt;span class="sb">`&lt;/span>docker ps&lt;span class="p">|&lt;/span>grep &lt;span class="s2">&amp;#34;istio-proxy_productpage&amp;#34;&lt;/span>&lt;span class="p">|&lt;/span>cut -d &lt;span class="s2">&amp;#34; &amp;#34;&lt;/span> -f1&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">UID PID PPID C STIME TTY TIME CMD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1337&lt;/span> &lt;span class="m">10576&lt;/span> &lt;span class="m">10517&lt;/span> &lt;span class="m">0&lt;/span> 08:09 ? 00:00:07 /usr/local/bin/pilot-agent proxy sidecar --domain default.svc.cluster.local --configPath /etc/istio/proxy --binaryPath /usr/local/bin/envoy --serviceCluster productpage.default --drainDuration 45s --parentShutdownDuration 1m0s --discoveryAddress istiod.istio-system.svc:15012 --zipkinAddress zipkin.istio-system:9411 --proxyLogLevel&lt;span class="o">=&lt;/span>warning --proxyComponentLogLevel&lt;span class="o">=&lt;/span>misc:error --connectTimeout 10s --proxyAdminPort &lt;span class="m">15000&lt;/span> --concurrency &lt;span class="m">2&lt;/span> --controlPlaneAuthPolicy NONE --dnsRefreshRate 300s --statusPort &lt;span class="m">15020&lt;/span> --trust-domain&lt;span class="o">=&lt;/span>cluster.local --controlPlaneBootstrap&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1337&lt;/span> &lt;span class="m">10660&lt;/span> &lt;span class="m">10576&lt;/span> &lt;span class="m">0&lt;/span> 08:09 ? 00:00:33 /usr/local/bin/envoy -c /etc/istio/proxy/envoy-rev0.json --restart-epoch &lt;span class="m">0&lt;/span> --drain-time-s &lt;span class="m">45&lt;/span> --parent-shutdown-time-s &lt;span class="m">60&lt;/span> --service-cluster productpage.default --service-node sidecar~172.17.0.16~productpage-v1-7f44c4d57c-ksf9b.default~default.svc.cluster.local --max-obj-name-len &lt;span class="m">189&lt;/span> --local-address-ip-version v4 --log-format &lt;span class="o">[&lt;/span>Envoy &lt;span class="o">(&lt;/span>Epoch 0&lt;span class="o">)]&lt;/span> &lt;span class="o">[&lt;/span>%Y-%m-%d %T.%e&lt;span class="o">][&lt;/span>%t&lt;span class="o">][&lt;/span>%l&lt;span class="o">][&lt;/span>%n&lt;span class="o">]&lt;/span> %v -l warning --component-log-level misc:error --concurrency &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Enter the nsenter into the namespace of the sidecar container (any of the above is ok)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nsenter -n --target &lt;span class="m">10660&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>View the process&amp;rsquo;s iptables rule chain under its namespace.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># View the details of the rule configuration in the NAT table.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ iptables -t nat -L -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># PREROUTING chain: Used for Destination Address Translation (DNAT) to jump all incoming TCP traffic to the ISTIO_INBOUND chain.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Chain PREROUTING &lt;span class="o">(&lt;/span>policy ACCEPT &lt;span class="m">2701&lt;/span> packets, 162K bytes&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkts bytes target prot opt in out &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">2701&lt;/span> 162K ISTIO_INBOUND tcp -- any any anywhere anywhere
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># INPUT chain: Processes incoming packets and non-TCP traffic will continue on the OUTPUT chain.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Chain INPUT &lt;span class="o">(&lt;/span>policy ACCEPT &lt;span class="m">2701&lt;/span> packets, 162K bytes&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkts bytes target prot opt in out &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># OUTPUT chain: jumps all outbound packets to the ISTIO_OUTPUT chain.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Chain OUTPUT &lt;span class="o">(&lt;/span>policy ACCEPT &lt;span class="m">79&lt;/span> packets, &lt;span class="m">6761&lt;/span> bytes&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkts bytes target prot opt in out &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">15&lt;/span> &lt;span class="m">900&lt;/span> ISTIO_OUTPUT tcp -- any any anywhere anywhere
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># POSTROUTING CHAIN: All packets must first enter the POSTROUTING chain when they leave the network card, and the kernel determines whether they need to be forwarded out according to the packet destination.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Chain POSTROUTING &lt;span class="o">(&lt;/span>policy ACCEPT &lt;span class="m">79&lt;/span> packets, &lt;span class="m">6761&lt;/span> bytes&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkts bytes target prot opt in out &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ISTIO_INBOUND CHAIN: Redirects all inbound traffic to the ISTIO_IN_REDIRECT chain, except for traffic destined for ports 15090 (used by Prometheus) and 15020 (used by Ingress gateway for Pilot health checks), and traffic sent to these two ports will return to the call point of the iptables rule chain, the successor POSTROUTING to the PREROUTING chain.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Chain ISTIO_INBOUND &lt;span class="o">(&lt;/span>&lt;span class="m">1&lt;/span> references&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkts bytes target prot opt in out &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> RETURN tcp -- any any anywhere anywhere tcp dpt:ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">2&lt;/span> &lt;span class="m">120&lt;/span> RETURN tcp -- any any anywhere anywhere tcp dpt:15090
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">2699&lt;/span> 162K RETURN tcp -- any any anywhere anywhere tcp dpt:15020
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ISTIO_IN_REDIRECT tcp -- any any anywhere anywhere
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ISTIO_IN_REDIRECT chain: jumps all inbound traffic to the local 15006 port, thus successfully blocking traffic to the sidecar.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Chain ISTIO_IN_REDIRECT &lt;span class="o">(&lt;/span>&lt;span class="m">3&lt;/span> references&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkts bytes target prot opt in out &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> REDIRECT tcp -- any any anywhere anywhere redir ports &lt;span class="m">15006&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ISTIO_OUTPUT chain: see the details bellow&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Chain ISTIO_OUTPUT &lt;span class="o">(&lt;/span>&lt;span class="m">1&lt;/span> references&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkts bytes target prot opt in out &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> RETURN all -- any lo 127.0.0.6 anywhere
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ISTIO_IN_REDIRECT all -- any lo anywhere !localhost owner UID match &lt;span class="m">1337&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> RETURN all -- any lo anywhere anywhere ! owner UID match &lt;span class="m">1337&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">15&lt;/span> &lt;span class="m">900&lt;/span> RETURN all -- any any anywhere anywhere owner UID match &lt;span class="m">1337&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ISTIO_IN_REDIRECT all -- any lo anywhere !localhost owner GID match &lt;span class="m">1337&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> RETURN all -- any lo anywhere anywhere ! owner GID match &lt;span class="m">1337&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> RETURN all -- any any anywhere anywhere owner GID match &lt;span class="m">1337&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> RETURN all -- any any anywhere localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> ISTIO_REDIRECT all -- any any anywhere anywhere
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ISTIO_REDIRECT chain: redirects all traffic to Sidecar (i.e. local) port 15001.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Chain ISTIO_REDIRECT &lt;span class="o">(&lt;/span>&lt;span class="m">1&lt;/span> references&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkts bytes target prot opt in out &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> REDIRECT tcp -- any any anywhere anywhere redir ports &lt;span class="m">15001&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The focus here is on the 9 rules in the &lt;code>ISTIO_OUTPUT&lt;/code> chain. For ease of reading, I will show some of the above rules in the form of a table as follows.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Rule&lt;/strong>&lt;/th>
&lt;th>&lt;strong>target&lt;/strong>&lt;/th>
&lt;th>&lt;strong>in&lt;/strong>&lt;/th>
&lt;th>&lt;strong>out&lt;/strong>&lt;/th>
&lt;th>&lt;strong>source&lt;/strong>&lt;/th>
&lt;th>&lt;strong>destination&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>127.0.0.6&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>ISTIO_IN_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>!localhost owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere !owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>ISTIO_IN_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>!localhost owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere !owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>localhost&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>ISTIO_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The following diagram shows the detailed flow of the &lt;code>ISTIO_ROUTE&lt;/code> rule.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/sidecar-injection-iptables-and-traffic-routing/istio-route-iptables.svg" data-img="/blog/sidecar-injection-iptables-and-traffic-routing/istio-route-iptables.svg" alt="istio-route-iptables.svg" data-caption="ISTIO_ROUTE iptables rules">
&lt;figcaption>ISTIO_ROUTE iptables rules&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>I will explain the purpose of each rule, corresponding to the steps and details in the illustration at the beginning of the article, in the order in which they appear. Where rules 5, 6, and 7 are extensions of the application of rules 2, 3, and 4 respectively (from UID to GID), which serve similar purposes and will be explained together. Note that the rules therein are executed in order, meaning that the rule with the next highest order will be used as the default. When the outbound NIC (out) is lo (local loopback address, loopback interface), it means that the destination of the traffic is the local Pod, and traffic sent from the Pod to the outside, will not go through this interface. Only rules 4, 7, 8, and 9 apply to all outbound traffic from the review Pod.&lt;/p>
&lt;p>&lt;strong>Rule 1&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Purpose: To pass through traffic sent by the Envoy proxy to the local application container, so that it bypasses the Envoy proxy and goes directly to the application container.&lt;/li>
&lt;li>Corresponds to steps 6 through 7 in the illustration.&lt;/li>
&lt;li>Details: This rule causes all requests from 127.0.0.6 (this IP address will be explained below) to jump out of the chain, return to the point of invocation of iptables (i.e. OUTPUT) and continue with the rest of the routing rules, i.e. the &lt;code>POSTROUTING&lt;/code> rule, which sends traffic to an arbitrary destination, such as the application container within the local Pod. Without this rule, traffic from the Envoy proxy within the Pod to the Pod container will execute the next rule, rule 2, and the traffic will enter the Inbound Handler again, creating a dead loop. Putting this rule in the first place can avoid the problem of traffic dead-ending in the Inbound Handler.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Rule 2, 5&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Purpose: Handle inbound traffic (traffic inside the Pod) from the Envoy proxy, but not requests to the localhost, and forward it to the Envoy proxy&amp;rsquo;s Inbound Handler via a subsequent rule. This rule applies to scenarios where the Pod invokes its own IP address, i.e., traffic between services within the Pod.&lt;/li>
&lt;li>Details: If the destination of the traffic is not localhost and the packet is sent by 1337 UID (i.e. istio-proxy user, Envoy proxy), the traffic will be forwarded to Envoy&amp;rsquo;s Inbound Handler through &lt;code>ISTIO_IN_REDIRECT&lt;/code> eventually.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Rule 3, 6&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Purpose: To pass through the internal traffic of the application container within the Pod. This rule applies to traffic within the container. For example, access to Pod IP or localhost within a Pod.&lt;/li>
&lt;li>Corresponds to steps 6 through 7 in the illustration.&lt;/li>
&lt;li>Details: If the traffic is not sent by an Envoy user, then jump out of the chain and return to &lt;code>OUTPUT&lt;/code> to call &lt;code>POSTROUTING&lt;/code> and go straight to the destination.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Rule 4, 7&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Purpose: To pass through outbound requests sent by Envoy proxy.&lt;/li>
&lt;li>Corresponds to steps 14 through 15 in the illustration.&lt;/li>
&lt;li>Details: If the request was made by the Envoy proxy, return &lt;code>OUTPUT&lt;/code> to continue invoking the &lt;code>POSTROUTING&lt;/code> rule and eventually access the destination directly.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Rule 8&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Purpose: Passes requests from within the Pod to the localhost.&lt;/li>
&lt;li>Details: If the destination of the request is localhost, return &lt;code>OUTPUT&lt;/code> and call &lt;code>POSTROUTING&lt;/code> to access localhost directly.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Rule 9&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Purpose: All other traffic will be forwarded to &lt;code>ISTIO_REDIRECT&lt;/code> after finally reaching the Outbound Handler of Envoy proxy.&lt;/li>
&lt;li>Corresponds to steps 10 through 11 in the illustration.&lt;/li>
&lt;/ul>
&lt;p>The above rule avoids dead loops in the iptables rules for Envoy proxy to application routing, and guarantees that traffic can be routed correctly to the Envoy proxy, and that real outbound requests can be made.&lt;/p>
&lt;p>&lt;strong>About RETURN target&lt;/strong>&lt;/p>
&lt;p>You may notice that there are many &lt;code>RETURN&lt;/code> targets in the above rules, which means that when this rule is specified, it jumps out of the rule chain, returns to the call point of iptables (in our case &lt;code>OUTPUT&lt;/code>) and continues to execute the rest of the routing rules, in our case the &lt;code>POSTROUTING&lt;/code> rule, which sends traffic to any destination address, you can think of This is intuitively understood as pass-through.&lt;/p>
&lt;p>&lt;strong>About the 127.0.0.6 IP address&lt;/strong>&lt;/p>
&lt;p>The IP 127.0.0.6 is the default &lt;code>InboundPassthroughClusterIpv4&lt;/code> in Istio and is specified in the code of Istio. This is the IP address to which traffic is bound after entering the Envoy proxy, and serves to allow Outbound traffic to be re-sent to the application container in the Pod, i.e. Passthought, bypassing the Outbound Handler. this traffic is access to the Pod itself, and not real outbound traffic. See Istio &lt;a href="https://github.com/istio/istio/issues/29603" title="Issue-29603" target="_blank" rel="noopener">Issue-29603&lt;/a>
for more information on why this IP was chosen as the traffic passthrough.&lt;/p>
&lt;h2 id="the-traffic-routing-process-explained">The traffic routing process explained&lt;/h2>
&lt;p>Traffic routing is divided into two processes, Inbound and Outbound, which will be analyzed in detail for the reader below based on the example above and the configuration of the sidecar.&lt;/p>
&lt;h3 id="understand-inbound-handler">Understand Inbound Handler&lt;/h3>
&lt;p>The role of the Inbound handler is to pass traffic from the downstream blocked by iptables to the localhost and establish a connection to the application container within the Pod. Assuming the name of one of the Pods is &lt;code>reviews-v1-545db77b95-jkgv2&lt;/code>, run &lt;code>istioctl proxy-config listener reviews-v1-545db77b95-jkgv2 --port 15006&lt;/code> to see which Listener is in that Pod.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="na">ADDRESS PORT MATCH DESTINATION&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15006 Addr: *:15006 Non-HTTP/Non-TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15006 Trans: tls; App: istio-http/1.0,istio-http/1.1,istio-h2; Addr: 0.0.0.0/0 InboundPassthroughClusterIpv4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15006 Trans: raw_buffer; App: http/1.1,h2c; Addr: 0.0.0.0/0 InboundPassthroughClusterIpv4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15006 Trans: tls; App: TCP TLS; Addr: 0.0.0.0/0 InboundPassthroughClusterIpv4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15006 Trans: raw_buffer; Addr: 0.0.0.0/0 InboundPassthroughClusterIpv4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15006 Trans: tls; Addr: 0.0.0.0/0 InboundPassthroughClusterIpv4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15006 Trans: tls; App: istio,istio-peer-exchange,istio-http/1.0,istio-http/1.1,istio-h2; Addr: *:9080 Cluster: inbound|9080||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15006 Trans: raw_buffer; Addr: *:9080 Cluster: inbound|9080||&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following lists the meanings of the fields in the above output.&lt;/p>
&lt;ul>
&lt;li>ADDRESS: downstream address&lt;/li>
&lt;li>PORT: The port the Envoy listener is listening on&lt;/li>
&lt;li>MATCH: The transport protocol used by the request or the matching downstream address&lt;/li>
&lt;li>DESTINATION: Route destination&lt;/li>
&lt;/ul>
&lt;p>The Iptables in the reviews Pod hijack inbound traffic to port 15006, and from the above output we can see that Envoy&amp;rsquo;s Inbound Handler is listening on port 15006, and requests to port 9080 destined for any IP will be routed to the &lt;code>inbound|9080||&lt;/code> Cluster.&lt;/p>
&lt;p>As you can see in the last two rows of the Pod&amp;rsquo;s Listener list, the Listener for &lt;code>0.0.0.0:15006/TCP&lt;/code> (whose actual name is &lt;code>virtualInbound&lt;/code>) listens for all Inbound traffic, which contains matching rules, and traffic to port 9080 from any IP will be routed. If you want to see the detailed configuration of this Listener in Json format, you can execute the &lt;code>istioctl proxy-config listeners reviews-v1-545db77b95-jkgv2 --port 15006 -o json&lt;/code> command. You will get an output similar to the following.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">/*omit*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;virtualInbound&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;socketAddress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;portValue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15006&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filterChains&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">/*omit*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filterChainMatch&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;destinationPort&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">9080&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;transportProtocol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;tls&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;applicationProtocols&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;istio&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;istio-peer-exchange&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;istio-http/1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;istio-http/1.1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;istio-h2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filters&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">/*omit*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;envoy.filters.network.http_connection_manager&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;typedConfig&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;statPrefix&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound_0.0.0.0_9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;routeConfig&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|9080||&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;virtualHosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|http|9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;domains&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;routes&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;match&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;prefix&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cluster&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|9080||&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;timeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;maxStreamDuration&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;maxStreamDuration&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;grpcTimeoutHeaderMax&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;decorator&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;operation&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;reviews.default.svc.cluster.local:9080/*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;validateClusters&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">/*omit*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">/*omit*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listenerFilters&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">/*omit*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listenerFiltersTimeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;continueOnListenerFiltersTimeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;trafficDirection&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;INBOUND&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the Inbound Handler traffic routes traffic from any address to this Pod port 9080 to the &lt;code>inbound|9080||&lt;/code> Cluster, let&amp;rsquo;s run &lt;code>istioctl pc cluster reviews-v1-545db77b95-jkgv2 --port 9080 --direction inbound -o json&lt;/code> to see the Cluster configuration and you will get something like the following output.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|9080||&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ORIGINAL_DST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;connectTimeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;lbPolicy&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;CLUSTER_PROVIDED&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;circuitBreakers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;thresholds&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;maxConnections&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4294967295&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;maxPendingRequests&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4294967295&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;maxRequests&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4294967295&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;maxRetries&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4294967295&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;trackRemaining&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cleanupInterval&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;60s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;upstreamBindConfig&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;sourceAddress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;portValue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;metadata&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filterMetadata&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;istio&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;services&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;reviews.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;reviews&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We see that the &lt;code>TYPE&lt;/code> is &lt;code>ORIGINAL_DST&lt;/code>, which sends the traffic to the original destination address (Pod IP), because the original destination address is the current Pod, you should also notice that the value of &lt;code>upstreamBindConfig.sourceAddress.address&lt;/code> is rewritten to 127.0.0.6, and for Pod This echoes the first rule in the iptables &lt;code>ISTIO_OUTPUT&lt;/code> the chain above, according to which traffic will be passed through to the application container inside the Pod.&lt;/p>
&lt;h3 id="understand-outbound-handler">Understand Outbound Handler&lt;/h3>
&lt;p>Because reviews send an HTTP request to the ratings service at &lt;code>http://ratings.default.svc.cluster.local:9080/&lt;/code>, the role of the Outbound handler is to intercept traffic from the local application to which iptables has intercepted, and determine how to route it to the upstream via the sidecar.&lt;/p>
&lt;p>Requests from application containers are Outbound traffic, hijacked by iptables and transferred to the Outbound handler for processing, which then passes through the virtualOutbound Listener, the &lt;code>0.0.0.0_9080&lt;/code> Listener, and then finds the upstream cluster via Route 9080, which in turn finds the Endpoint via EDS to perform the routing action.&lt;/p>
&lt;p>&lt;strong>Route &lt;code>ratings.default.svc.cluster.local:9080&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>reviews&lt;/code> requests the &lt;code>ratings&lt;/code> service and runs &lt;code>istioctl proxy-config routes reviews-v1-545db77b95-jkgv2 --name 9080 -o json&lt;/code>. View the route configuration because the sidecar matches VirtualHost based on domains in the HTTP header, so only &lt;code>ratings.default.svc.cluster.local:9080&lt;/code> is listed below for this VirtualHost.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster.local:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;domains&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster.local:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;10.98.49.62&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;10.98.49.62:9080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;routes&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;match&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;prefix&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cluster&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;timeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;retryPolicy&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;retryOn&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;connect-failure,refused-stream,unavailable,cancelled,resource-exhausted,retriable-status-codes&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;numRetries&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;retryHostPredicate&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;envoy.retry_host_predicates.previous_hosts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;hostSelectionRetryMaxAttempts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;retriableStatusCodes&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">503&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;maxGrpcTimeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;decorator&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;operation&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster.local:9080/*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">..&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From this VirtualHost configuration, you can see routing traffic to the cluster &lt;code>outbound|9080||ratings.default.svc.cluster.local&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Endpoint &lt;code>outbound|9080||ratings.default.svc.cluster.local&lt;/code>&lt;/strong>&lt;/p>
&lt;p>Running &lt;code>istioctl proxy-config endpoint reviews-v1-545db77b95-jkgv2 --port 9080 -o json --cluster &amp;quot;outbound|9080||ratings.default.svc.cluster.local&amp;quot;&lt;/code> to view the Endpoint configuration, the results are as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;clusterName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;endpoints&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;locality&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;lbEndpoints&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;endpoint&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;socketAddress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;172.33.100.2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;portValue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">9080&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;metadata&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filterMetadata&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;istio&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;kubernetes://ratings-v1-8558d4458d-ns6lk.default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We see that the endpoint address is &lt;code>10.4.1.12&lt;/code>. In fact, the Endpoint can be one or more, and the sidecar will select the appropriate Endpoint to route based on certain rules. At this point the review Pod has found the Endpoint for its upstream service rating.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>This article uses the bookinfo example provided by Istio to guide readers through the implementation details behind the sidecar injection, iptables transparent traffic hijacking, and traffic routing in the sidecar. The sidecar mode and traffic transparent hijacking are the features and basic functions of Istio service mesh, understanding the process behind this function and the implementation details will help you understand the principle of service mesh and the content in the later chapters of the &lt;a href="https://jimmysong.io/istio-handbook" title="Istio Handbook" target="_blank" rel="noopener">Istio Handbook&lt;/a>
, so I hope readers can try it from scratch in their own environment to deepen their understanding.&lt;/p>
&lt;p>Using iptables for traffic hijacking is just one of the ways to do traffic hijacking in the data plane of a service mesh, and there are many more traffic hijacking scenarios, quoted below from the description of the traffic hijacking section given in the MOSN official network of the cloud-native network proxy.&lt;/p>
&lt;h3 id="problems-with-using-iptables-for-traffic-hijacking">Problems with using iptables for traffic hijacking&lt;/h3>
&lt;p>Currently, Istio uses iptables for transparent hijacking and there are three main problems.&lt;/p>
&lt;ol>
&lt;li>The need to use the conntrack module for connection tracking, in the case of a large number of connections, will cause a large consumption and may cause the track table to be full, in order to avoid this problem, the industry has a practice of closing conntrack.&lt;/li>
&lt;li>iptables is a common module with global effect and cannot explicitly prohibit associated changes, which is less controllable.&lt;/li>
&lt;li>iptables redirect traffic is essentially exchanging data via a loopback. The outbound traffic will traverse the protocol stack twice and lose forwarding performance in a large concurrency scenario.&lt;/li>
&lt;/ol>
&lt;p>Several of the above problems are not present in all scenarios, let&amp;rsquo;s say some scenarios where the number of connections is not large and the NAT table is not used, iptables is a simple solution that meets the requirements. In order to adapt to a wider range of scenarios, transparent hijacking needs to address all three of these issues.&lt;/p>
&lt;h3 id="transparent-hijacking-optimization">Transparent hijacking optimization&lt;/h3>
&lt;p>In order to optimize the performance of transparent traffic hijacking in Istio, the following solutions have been proposed by the industry.&lt;/p>
&lt;p>&lt;strong>Traffic Hijacking with eBPF using the Merbridge Open Source Project&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://github.com/merbridge/merbridge" title="Merbridge" target="_blank" rel="noopener">Merbridge&lt;/a>
is a plug-in that leverages eBPF to accelerate the Istio service mesh, which was open sourced by DaoCloud in early 2022. Using Merbridge can optimize network performance in the data plane to some extent.&lt;/p>
&lt;p>Merbridge leverages the sockops and &lt;code>redir&lt;/code> capabilities of eBPF to transfer packets directly from inbound sockets to outbound sockets. eBPF provides the &lt;code>bpf_msg_redirect_hash&lt;/code> function to forward application packets directly.&lt;/p>
&lt;p>&lt;strong>Handling inbound traffic with tproxy&lt;/strong>&lt;/p>
&lt;p>tproxy can be used for redirection of inbound traffic without changing the destination IP/port in the packet, without performing connection tracking, and without the problem of conntrack modules creating a large number of connections. Restricted to the kernel version, tproxy&amp;rsquo;s application to outbound is flawed. Istio currently supports handling inbound traffic via tproxy.&lt;/p>
&lt;p>&lt;strong>Use hook connect to handle outbound traffic&lt;/strong>&lt;/p>
&lt;p>In order to adapt to more application scenarios, the outbound direction is implemented by hook connect, which is implemented as follows.&lt;/p>
&lt;figure class="mx-auto text-center">
&lt;img src="hook-connect.svg" loading="lazy" decoding="async"
alt="Hook Connect Diagram" width="50%"data-img="hook-connect.svg"
data-caption="hook-connect images"
/>&lt;figcaption>
Hook Connect Diagram
&lt;/figcaption>
&lt;/figure>
&lt;p>Whichever transparent hijacking scheme is used, the problem of obtaining the real destination IP/port needs to be solved, using the iptables scheme through getsockopt, &lt;code>tproxy&lt;/code> can read the destination address directly, by modifying the call interface, hook connect scheme reads in a similar way to tproxy.&lt;/p>
&lt;p>After the transparent hijacking, the &lt;code>sockmap&lt;/code> can shorten the packet traversal path and improve forwarding performance in the outbound direction, provided that the kernel version meets the requirements (4.16 and above).&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://istio.io/docs/ops/diagnostic-tools/proxy-cmd/" title="Debugging Envoy and Istiod - istio.io" target="_blank" rel="noopener">Debugging Envoy and Istiod - istio.io&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://istio.io/blog/2019/data-plane-setup/" title="Demystifying Istio&amp;amp;rsquo;s Sidecar Injection Model - istio.io" target="_blank" rel="noopener">Demystifying Istio&amp;rsquo;s Sidecar Injection Model - istio.io&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://mosn.io/en/docs/concept/traffic-hijack/" title="The traffic hijacking solution when MOSN is used as a sidecar - mosn.io" target="_blank" rel="noopener">The traffic hijacking solution when MOSN is used as a sidecar - mosn.io&lt;/a>
&lt;/li>
&lt;/ul></description></item><item><title>Istio data plane pod startup process explained</title><link>https://sdmx.io/blog/istio-pod-process-lifecycle/</link><pubDate>Thu, 12 May 2022 19:18:40 +0800</pubDate><guid>https://sdmx.io/blog/istio-pod-process-lifecycle/</guid><description>
&lt;p>This article will explain:&lt;/p>
&lt;ul>
&lt;li>The sidecar auto-injection process in Istio&lt;/li>
&lt;li>The init container startup process in Istio&lt;/li>
&lt;li>The startup process of a Pod with Sidecar auto-injection enabled&lt;/li>
&lt;/ul>
&lt;p>The following figure shows the components of a Pod in the Istio data plane after it has been started.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-pod-process-lifecycle/istio-pod-lifecycle.jpg" data-img="/blog/istio-pod-process-lifecycle/istio-pod-lifecycle.jpg" data-width="1200" data-height="813" alt="istio-pod-lifecycle.jpg" data-caption="Istio data plane pod">
&lt;figcaption>Istio data plane pod&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="sidecar-injection-in-istio">Sidecar injection in Istio&lt;/h2>
&lt;p>The following two sidecar injection methods are available in Istio.&lt;/p>
&lt;ul>
&lt;li>Manual injection using &lt;code>istioctl&lt;/code>.&lt;/li>
&lt;li>Kubernetes-based &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/" title="mutating webhook admission controller" target="_blank" rel="noopener">mutating webhook admission controller&lt;/a>
automatic sidecar injection method.&lt;/li>
&lt;/ul>
&lt;p>Whether injected manually or automatically, SIDECAR&amp;rsquo;s injection process follows the following steps.&lt;/p>
&lt;ol>
&lt;li>Kubernetes needs to know the Istio cluster to which the sidecar to be injected is connected and its configuration.&lt;/li>
&lt;li>Kubernetes needs to know the configuration of the sidecar container itself to be injected, such as the image address, boot parameters, etc.&lt;/li>
&lt;li>Kubernetes injects the above configuration into the side of the application container by the sidecar injection template and the configuration parameters of the above configuration-filled sidecar.&lt;/li>
&lt;/ol>
&lt;p>The sidecar can be injected manually using the following command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">istioctl kube-inject -f &lt;span class="si">${&lt;/span>&lt;span class="nv">YAML_FILE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="p">|&lt;/span> kuebectl apply -f -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command is injected using Istio&amp;rsquo;s built-in sidecar configuration, see the &lt;a href="https://istio.io" title="Istio official website" target="_blank" rel="noopener">Istio official website&lt;/a>
for details on how to use Istio below.&lt;/p>
&lt;p>When the injection is complete you will see that Istio has injected initContainer and sidecar proxy-related configurations into the original pod template.&lt;/p>
&lt;h3 id="init-container">Init container&lt;/h3>
&lt;p>The Init container is a dedicated container that runs before the application container is launched and is used to contain some utilities or installation scripts that do not exist in the application image.&lt;/p>
&lt;p>Multiple Init containers can be specified in a Pod, and if more than one is specified, the Init containers will run sequentially. The next Init container can only be run if the previous Init container must run successfully. Kubernetes only initializes the Pod and runs the application container when all the Init containers have been run.&lt;/p>
&lt;p>The Init container uses Linux Namespace, so it has a different view of the file system than the application container. As a result, they can have access to Secret in a way that application containers cannot.&lt;/p>
&lt;p>During Pod startup, the Init container starts sequentially after the network and data volumes are initialized. Each container must be successfully exited before the next container can be started. If exiting due to an error will result in a container startup failure, it will retry according to the policy specified in the Pod&amp;rsquo;s restartPolicy. However, if the Pod&amp;rsquo;s restartPolicy is set to Always, the restartPolicy is used when the Init container failed.&lt;/p>
&lt;p>The Pod will not become Ready until all Init containers are successful. The ports of the Init containers will not be aggregated in the Service. The Pod that is being initialized is in the Pending state but should set the Initializing state to true. The Init container will automatically terminate once it is run.&lt;/p>
&lt;h2 id="sidecar-injection-example-analysis">Sidecar injection example analysis&lt;/h2>
&lt;p>For a detailed YAML configuration for the bookinfo applications, see &lt;code>bookinfo.yaml&lt;/code> for the official Istio YAML of productpage in the bookinfo sample.&lt;/p>
&lt;p>The following will be explained in the following terms.&lt;/p>
&lt;ul>
&lt;li>Injection of Sidecar containers&lt;/li>
&lt;li>Creation of iptables rules&lt;/li>
&lt;li>The detailed process of routing&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">productpage-v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">productpage&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">productpage&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">productpage&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceAccountName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bookinfo-productpage&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">productpage&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.io/istio/examples-bookinfo-productpage-v1:1.15.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IfNotPresent&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tmp&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tmp&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">emptyDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s see the &lt;code>productpage&lt;/code> container’s &lt;a href="https://github.com/istio/istio/blob/master/samples/bookinfo/src/productpage/Dockerfile" title="Dockerfile" target="_blank" rel="noopener">Dockerfile&lt;/a>
.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-docker" data-lang="docker">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> python:3.7.4-slim&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> requirements.txt ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip install --no-cache-dir -r requirements.txt&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> test-requirements.txt ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip install --no-cache-dir -r test-requirements.txt&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> productpage.py /opt/microservices/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> tests/unit/* /opt/microservices/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> templates /opt/microservices/templates&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> static /opt/microservices/static&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> requirements.txt /opt/microservices/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ARG&lt;/span> flood_factor&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> FLOOD_FACTOR &lt;span class="si">${&lt;/span>&lt;span class="nv">flood_factor&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="nv">0&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">EXPOSE&lt;/span>&lt;span class="s"> 9080&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /opt/microservices&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> python -m unittest discover&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="s"> 1&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;productpage.py&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;9080&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We see that &lt;code>ENTRYPOINT&lt;/code> is not configured in Dockerfile, so &lt;code>CMD&lt;/code>’s configuration &lt;code>python productpage.py 9080&lt;/code> will be the default &lt;code>ENTRYPOINT&lt;/code>, keep that in mind and look at the configuration after the sidecar injection.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We intercept only a portion of the YAML configuration that is part of the Deployment configuration associated with productpage.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.io/istio/examples-bookinfo-productpage-v1:1.15.0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># application image&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">productpage&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">proxy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">sidecar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">domain&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">$(POD_NAMESPACE).svc.cluster.local&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">configPath&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">/etc/istio/proxy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">binaryPath&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">/usr/local/bin/envoy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">serviceCluster&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">productpage.$(POD_NAMESPACE)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">drainDuration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">45s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">parentShutdownDuration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">1m0s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">discoveryAddress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">istiod.istio-system.svc:15012&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">zipkinAddress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">zipkin.istio-system:9411&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">proxyLogLevel=warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">proxyComponentLogLevel=misc:error&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">connectTimeout&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">10s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">proxyAdminPort&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;15000&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">concurrency&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">controlPlaneAuthPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">NONE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">dnsRefreshRate&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">300s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">statusPort&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;15020&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">trust-domain=cluster.local&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- --&lt;span class="l">controlPlaneBootstrap=false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.io/istio/proxyv2:1.5.1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># sidecar proxy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">istio-proxy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">15090&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http-envoy-prom&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">initContainers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">istio-iptables&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">p&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;15001&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;15006&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">u&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;1337&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">m&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">REDIRECT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">i&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">x&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">b&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">d&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">15090&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">15020&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.io/istio/proxyv2:1.5.1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># init container&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">istio-init&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Istio&amp;rsquo;s configuration for application Pod injection mainly includes:&lt;/p>
&lt;ul>
&lt;li>Init container &lt;code>istio-init&lt;/code>: for setting iptables port forwarding in the pod&lt;/li>
&lt;li>Sidecar container &lt;code>istio-proxy&lt;/code>: running a sidecar proxy, such as Envoy or MOSN&lt;/li>
&lt;/ul>
&lt;p>The two containers will be parsed separately.&lt;/p>
&lt;h2 id="init-container-analysis">Init container analysis&lt;/h2>
&lt;p>The Init container that Istio injects into the pod is named &lt;code>istio-init&lt;/code>, and we see in the YAML file above after Istio&amp;rsquo;s injection is complete that the init command for this container is.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">istio-iptables -p &lt;span class="m">15001&lt;/span> -z &lt;span class="m">15006&lt;/span> -u &lt;span class="m">1337&lt;/span> -m REDIRECT -i &lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span> -x &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> -b &lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span> -d 15090,15020
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s check the container&amp;rsquo;s Dockerfile again to see how &lt;code>ENTRYPOINT&lt;/code> determines what commands are executed at startup.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-docker" data-lang="docker">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># ommit&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># The pilot-agent will bootstrap Envoy.&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/usr/local/bin/pilot-agent&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We see that the entrypoint of the &lt;code>istio-init&lt;/code> container is the &lt;code>/usr/local/bin/istio-iptables&lt;/code> command line, and the location of the code for this command-line tool is in the &lt;code>tools/istio-iptables&lt;/code> directory of the Istio source code repository.&lt;/p>
&lt;h3 id="init-container-initiation">Init container initiation&lt;/h3>
&lt;p>The Init container&amp;rsquo;s entrypoint is the &lt;code>istio-iptables&lt;/code> command line, which is used as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Usage:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> istio-iptables &lt;span class="o">[&lt;/span>flags&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Flags:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -n, --dry-run Do not call any external dependencies like iptables
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -p, --envoy-port string Specify the envoy port to which redirect all TCP traffic &lt;span class="o">(&lt;/span>default &lt;span class="nv">$ENVOY_PORT&lt;/span> &lt;span class="o">=&lt;/span> 15001&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -h, --help &lt;span class="nb">help&lt;/span> &lt;span class="k">for&lt;/span> istio-iptables
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -z, --inbound-capture-port string Port to which all inbound TCP traffic to the pod/VM should be redirected to &lt;span class="o">(&lt;/span>default &lt;span class="nv">$INBOUND_CAPTURE_PORT&lt;/span> &lt;span class="o">=&lt;/span> 15006&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --iptables-probe-port string &lt;span class="nb">set&lt;/span> listen port &lt;span class="k">for&lt;/span> failure detection &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;15002&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -m, --istio-inbound-interception-mode string The mode used to redirect inbound connections to Envoy, either &lt;span class="s2">&amp;#34;REDIRECT&amp;#34;&lt;/span> or &lt;span class="s2">&amp;#34;TPROXY&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -b, --istio-inbound-ports string Comma separated list of inbound ports &lt;span class="k">for&lt;/span> which traffic is to be redirected to Envoy &lt;span class="o">(&lt;/span>optional&lt;span class="o">)&lt;/span>. The wildcard character &lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span> can be used to configure redirection &lt;span class="k">for&lt;/span> all ports. An empty list will disable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -t, --istio-inbound-tproxy-mark string
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -r, --istio-inbound-tproxy-route-table string
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -d, --istio-local-exclude-ports string Comma separated list of inbound ports to be excluded from redirection to Envoy &lt;span class="o">(&lt;/span>optional&lt;span class="o">)&lt;/span>. Only applies when all inbound traffic &lt;span class="o">(&lt;/span>i.e. &lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> is being redirected &lt;span class="o">(&lt;/span>default to &lt;span class="nv">$ISTIO_LOCAL_EXCLUDE_PORTS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -o, --istio-local-outbound-ports-exclude string Comma separated list of outbound ports to be excluded from redirection to Envoy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -i, --istio-service-cidr string Comma separated list of IP ranges in CIDR form to redirect to envoy &lt;span class="o">(&lt;/span>optional&lt;span class="o">)&lt;/span>. The wildcard character &lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span> can be used to redirect all outbound traffic. An empty list will disable all outbound
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -x, --istio-service-exclude-cidr string Comma separated list of IP ranges in CIDR form to be excluded from redirection. Only applies when all outbound traffic &lt;span class="o">(&lt;/span>i.e. &lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> is being redirected &lt;span class="o">(&lt;/span>default to &lt;span class="nv">$ISTIO_SERVICE_EXCLUDE_CIDR&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -k, --kube-virt-interfaces string Comma separated list of virtual interfaces whose inbound traffic &lt;span class="o">(&lt;/span>from VM&lt;span class="o">)&lt;/span> will be treated as outbound
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --probe-timeout duration failure detection timeout &lt;span class="o">(&lt;/span>default 5s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -g, --proxy-gid string Specify the GID of the user &lt;span class="k">for&lt;/span> which the redirection is not applied. &lt;span class="o">(&lt;/span>same default value as -u param&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -u, --proxy-uid string Specify the UID of the user &lt;span class="k">for&lt;/span> which the redirection is not applied. Typically, this is the UID of the proxy container
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -f, --restore-format Print iptables rules in iptables-restore interpretable format &lt;span class="o">(&lt;/span>default &lt;span class="nb">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --run-validation Validate iptables
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --skip-rule-apply Skip iptables apply
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above incoming parameters are reassembled into iptables rules. For more information on how to use this command, visit &lt;code>tools/istio-iptables/pkg/cmd/root.go&lt;/code>.&lt;/p>
&lt;p>The significance of the container&amp;rsquo;s existence is that it allows the sidecar agent to intercept all inbound and outbound traffic to the pod, redirect all inbound traffic to port 15006 (sidecar) except port 15090 (used by Prometheus) and port 15092 (Ingress Gateway), and then intercept outbound traffic from the application container which is processed by sidecar (listening through port 15001) and then outbound. See the &lt;a href="https://istio.io/docs/ops/deployment/requirements/" title="official Istio documentation" target="_blank" rel="noopener">official Istio documentation&lt;/a>
for port usage in Istio.&lt;/p>
&lt;p>&lt;strong>Command analysis&lt;/strong>&lt;/p>
&lt;p>Here is the purpose of this start-up command.&lt;/p>
&lt;ul>
&lt;li>Forward all traffic from the application container to port 15006 of the sidecar.&lt;/li>
&lt;li>Run with the &lt;code>istio-proxy&lt;/code> user identity, with a UID of 1337, the userspace where the sidecar is located, which is the default user used by the &lt;code>istio-proxy&lt;/code> container, see the runAsUser field of the YAML configuration.&lt;/li>
&lt;li>Use the default REDIRECT mode to redirect traffic.&lt;/li>
&lt;li>Redirect all outbound traffic to the sidecar proxy (via port 15001).&lt;/li>
&lt;/ul>
&lt;p>Because the Init container is automatically terminated after initialization, since we cannot log into the container to view the iptables information, the Init container initialization results are retained in the application container and sidecar container.&lt;/p>
&lt;h2 id="pod-startup-sequence">Pod Startup Sequence&lt;/h2>
&lt;p>The startup process of a Pod with Sidecar auto-injection enabled is as follows.&lt;/p>
&lt;ol>
&lt;li>The Init container starts first, injecting iptables rules into the Pod for transparent traffic interception.&lt;/li>
&lt;li>Subsequently, Kubernetes starts the containers in the order in which they are declared in the Pod Spec, but this is non-blocking and there is no guarantee that the first container will be started before the next one is started. &lt;code>istio-proxy&lt;/code> container starts, &lt;code>pilot-agent&lt;/code> will be the PID 1 process, which is the first process in the Linux user space and is responsible for pulling up other processes and handling zombie processes. The &lt;code>pilot-agent&lt;/code> generates the Envoy bootstrap configuration and fork the envoy process; the application container is started almost simultaneously with the &lt;code>istio-proxy&lt;/code> container, and the readiness probe comes in handy to prevent the container inside the Pod from receiving outside traffic before it is ready to start. Kubernetes will perform a readiness check on port 15021 of the &lt;code>istio-proxy&lt;/code> container, and the &lt;code>kubelet&lt;/code> will not route traffic to the Pod until the &lt;code>isito-proxy&lt;/code> has finished booting.&lt;/li>
&lt;li>After the Pod is started, the &lt;code>pilot-agent&lt;/code> becomes a daemon that monitors the rest of the system and provides Envoy with Bootstrap configuration, certificates, health checks, configuration hot reloading, identity support, and process lifecycle management, among other things.&lt;/li>
&lt;/ol>
&lt;h2 id="pod-container-startup-order-problem">Pod container startup order problem&lt;/h2>
&lt;p>In the process of Pod startup there is a container startup order problem. Suppose the following situation, the application container starts first and requests other services, when the &lt;code>istio-proxy&lt;/code> container has not finished starting, then the request will fail, and if your application is not robust enough, it may even cause the application container to crash and the Pod to restart. The solution for this situation is to&lt;/p>
&lt;ul>
&lt;li>Modify the application to add timeout retries.&lt;/li>
&lt;li>Increase the start delay of the process in the application container, for example by increasing the sleep time.&lt;/li>
&lt;li>Add a &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/" title="postStart" target="_blank" rel="noopener">postStart&lt;/a>
configuration to the application container to detect if the application process has finished starting, and Kubernetes will only mark the Pod&amp;rsquo;s state as &lt;code>Running&lt;/code> if the detection is successful.&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>This article walks you through the process of starting Pods in the Istio data plane, and the issues that arise because of the order in which Pod contenters are started.&lt;/p></description></item><item><title> Istio component ports and functions in detail</title><link>https://sdmx.io/blog/istio-components-and-ports/</link><pubDate>Sun, 08 May 2022 10:18:40 +0800</pubDate><guid>https://sdmx.io/blog/istio-components-and-ports/</guid><description>
&lt;p>In my last two blogs:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://sdmx.io/en/blog/sidecar-injection-iptables-and-traffic-routing/" title="Sidecar injection, transparent traffic hijacking , and routing process in Istio explained in detail">Sidecar injection, transparent traffic hijacking , and routing process in Istio explained in detail&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://sdmx.io/en/blog/istio-sidecar-traffic-types/" title="Traffic types and iptables rules in Istio sidecar explained">Traffic types and iptables rules in Istio sidecar explained&lt;/a>
&lt;/li>
&lt;/ul>
&lt;p>I gave you a detailed overview of the traffic in the Istio data plane, but the data plane does not exist in isolation. This article will show you the ports and their usages for each component of both the control plane and data plane in Istio, which will help you understand the relationship between these flows and troubleshoot them.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Firstly, I will show you a global schematic. The following figure shows the components of a sidecar in the Istio data plane, and the objects that interact with it.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-components-and-ports/istio-ports-components.webp" data-img="/blog/istio-components-and-ports/istio-ports-components.webp" data-width="5230" data-height="2506" alt="istio-ports-components.webp" data-caption="Istio components">
&lt;figcaption>Istio components&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>We can use the &lt;code>nsenter&lt;/code> command to enter the namespace of the &lt;code>productpage&lt;/code> Pod of the Bookinfo example and see the information about the ports it is listening on internally.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-components-and-ports/sidecar-ports.webp" data-img="/blog/istio-components-and-ports/sidecar-ports.webp" data-width="1566" data-height="740" alt="sidecar-ports.webp" data-caption="Istio sidecar ports">
&lt;figcaption>Istio sidecar ports&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>From the figure, we can see that besides the port 9080 that the &lt;code>productpage&lt;/code> application listens to, the Sidecar container also listens to a large number of other ports, such as 15000, 15001, 15004, 15006, 15021, 15090, etc. You can learn about the ports used in Istio in the &lt;a href="https://istio.io/latest/docs/ops/deployment/requirements/" title="Istio documentation" target="_blank" rel="noopener">Istio documentation&lt;/a>
.&lt;/p>
&lt;p>Let&amp;rsquo;s go back into the &lt;code>productpage&lt;/code> Pod and use the &lt;code>lsof -i&lt;/code> command to see the ports it has open, as shown in the following figure.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-components-and-ports/product-pod-ports.webp" data-img="/blog/istio-components-and-ports/product-pod-ports.webp" data-width="2714" data-height="902" alt="product-pod-ports.webp" data-caption="Productpage Pod ports">
&lt;figcaption>Productpage Pod ports&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>We can see that there is a TCP connection established between the &lt;code>pilot-agent&lt;/code> and &lt;code>istiod&lt;/code>, the port in the listening described above, and the TCP connection established inside the Pod, which corresponds to the figure at the beginning of the article.&lt;/p>
&lt;p>The root process of the Sidecar container (&lt;code>istio-proxy&lt;/code>) is &lt;code>pilot-agent&lt;/code>, and the startup command is shown below.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-components-and-ports/sidecar-procecces.webp" data-img="/blog/istio-components-and-ports/sidecar-procecces.webp" data-width="2768" data-height="540" alt="sidecar-procecces.webp" data-caption="Internal procecces in Sidecar">
&lt;figcaption>Internal procecces in Sidecar&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>As we can see from the figure, the PID of its &lt;code>pilot-agent&lt;/code> process is 1, and it forked the Envoy process.&lt;/p>
&lt;p>Check the ports it opens in Istiod, as shown in the figure below.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-components-and-ports/sidecar-lsof.webp" data-img="/blog/istio-components-and-ports/sidecar-lsof.webp" data-width="2544" data-height="760" alt="sidecar-lsof.webp" data-caption="Istiod ports">
&lt;figcaption>Istiod ports&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>We can see the ports that are listened to, the inter-process and remote communication connections.&lt;/p>
&lt;h2 id="ports-usage-overview">Ports usage overview&lt;/h2>
&lt;p>These ports can play a pivotal role when you are troubleshooting. They are described below according to the component and function in which the port is located.&lt;/p>
&lt;h3 id="ports-in-istiod">Ports in Istiod&lt;/h3>
&lt;p>The ports in Istiod are relatively few and single-function.&lt;/p>
&lt;ul>
&lt;li>9876: ControlZ user interface, exposing information about Istiod&amp;rsquo;s processes&lt;/li>
&lt;li>8080: Istiod debugging port, through which the configuration and status information of the grid can be queried&lt;/li>
&lt;li>15010: Exposes the xDS API and issues plain text certificates&lt;/li>
&lt;li>15012: Same functionality as port 15010, but uses TLS communication&lt;/li>
&lt;li>15014: Exposes control plane metrics to Prometheus&lt;/li>
&lt;li>15017: Sidecar injection and configuration validation port&lt;/li>
&lt;/ul>
&lt;h2 id="ports-in-sidecar">Ports in sidecar&lt;/h2>
&lt;p>From the above, we see that there are numerous ports in the sidecar.&lt;/p>
&lt;ul>
&lt;li>15000: Envoy admin interface, which you can use to query and modify the configuration of Envoy Proxy. Please refer to&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/operations/admin" title=" Envoy documentation" target="_blank" rel="noopener"> Envoy documentation&lt;/a>
for details.&lt;/li>
&lt;li>15001: Used to handle outbound traffic.&lt;/li>
&lt;li>15004: Debug port (explained further below).&lt;/li>
&lt;li>15006: Used to handle inbound traffic.&lt;/li>
&lt;li>15020: Summarizes statistics, perform health checks on Envoy and DNS agents, and debugs &lt;code>pilot-agent&lt;/code> processes, as explained in detail below.&lt;/li>
&lt;li>15021: Used for sidecar health checks to determine if the injected Pod is ready to receive traffic. We set up the readiness probe on the &lt;code>/healthz/ready&lt;/code> path on this port, and Istio hands off the sidecar readiness checks to kubelet.&lt;/li>
&lt;li>15053: Local DNS proxy for scenarios where the cluster&amp;rsquo;s internal domain names are not resolved by Kubernetes DNS.&lt;/li>
&lt;li>15090: Envoy Prometheus query port, through which the &lt;code>pilot-agent&lt;/code> will scratch metrics.&lt;/li>
&lt;/ul>
&lt;p>The above ports can be divided into the following categories.&lt;/p>
&lt;ul>
&lt;li>Responsible for inter-process communication, such as 15001, 15006, 15053&lt;/li>
&lt;li>Health check and information statistics, e.g. 150021, 15090&lt;/li>
&lt;li>Debugging: 15000, 15004&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s look at the key ports in detail.&lt;/p>
&lt;h2 id="15000">15000&lt;/h2>
&lt;p>15000 is Envoy&amp;rsquo;s Admin interface, which allows us to modify Envoy and get a view and query metrics and configurations.&lt;/p>
&lt;p>The Admin interface consists of a REST API with multiple endpoints and a simple user interface. You can enable the Envoy Admin interface view in the &lt;code>productpage&lt;/code> Pod using the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl -n default port-forward deploy/productpage-v1 &lt;span class="m">15000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Visit &lt;code>http://localhost:15000&lt;/code> in your browser and you will see the Envoy Admin interface as shown below.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-components-and-ports/envoy-admin.webp" data-img="/blog/istio-components-and-ports/envoy-admin.webp" data-width="660" data-height="1158" alt="envoy-admin.webp" data-caption="Envoy Admin interface">
&lt;figcaption>Envoy Admin interface&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="15004">15004&lt;/h2>
&lt;p>With the &lt;code>pilot-agent&lt;/code> proxy &lt;code>istiod&lt;/code> debug endpoint on port 8080, you can access localhost&amp;rsquo;s port 15004 in the data plane Pod to query the grid information, which has the same effect as port 8080 below.&lt;/p>
&lt;h2 id="8080">8080&lt;/h2>
&lt;p>You can also forward &lt;code>istiod&lt;/code> port 8080 locally by running the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl -n istio-system port-forward deploy/istiod &lt;span class="m">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Visit &lt;code>http://localhost:8080/debug&lt;/code> in your browser and you will see the debug endpoint as shown in the figure below.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-components-and-ports/pilot-debug-console.webp" data-img="/blog/istio-components-and-ports/pilot-debug-console.webp" data-width="1080" data-height="1243" alt="pilot-debug-console.webp" data-caption="Pilot Debug Console">
&lt;figcaption>Pilot Debug Console&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Of course, this is only one way to get the mesh information and debug the mesh, you can also use &lt;code>istioctl&lt;/code> command or Kiali to debug it, which will be more efficient and intuitive.&lt;/p>
&lt;h2 id="15020">15020&lt;/h2>
&lt;p>Port 15020 has three main usages.&lt;/p>
&lt;ol>
&lt;li>Aggregating metrics: You can query port 15090 for Envoy&amp;rsquo;s metrics, or you can configure it to query the application&amp;rsquo;s metrics, aggregating Envoy, application, and its own metrics for Prometheus to collect. The corresponding debug endpoint is &lt;code>/stats/prometheus&lt;/code>.&lt;/li>
&lt;li>Performing health checks on Envoy and DNS agent: the corresponding debug endpoints are &lt;code>/healthz/ready&lt;/code> and &lt;code>/app-health&lt;/code>.&lt;/li>
&lt;li>Debugging &lt;code>pilot-agent&lt;/code> processes: the corresponding debug endpoints are &lt;code>/quitquitquit&lt;/code>, &lt;code>debug/ndsz&lt;/code> and &lt;code>/debug/pprof&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>The following figure shows the debugging information you see when you open &lt;code>http://localhost:15020/debug/pprof&lt;/code> in your browser.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-components-and-ports/pprof.webp" data-img="/blog/istio-components-and-ports/pprof.webp" data-width="1761" data-height="1080" alt="pprof.webp" data-caption="pprof endpoint">
&lt;figcaption>pprof endpoint&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>The information in the figure shows the stack information of the &lt;code>pilot-agent&lt;/code>.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>By understanding the component ports in Istio, you should have a better understanding of the relationship between the components in Istio and their internal traffic. Being familiar with the functions of these ports will help in troubleshooting the mesh.&lt;/p></description></item><item><title>Traffic types and iptables rules in Istio sidecar explained</title><link>https://sdmx.io/blog/istio-sidecar-traffic-types/</link><pubDate>Sat, 07 May 2022 11:18:40 +0800</pubDate><guid>https://sdmx.io/blog/istio-sidecar-traffic-types/</guid><description>
&lt;p>As we know that Istio uses iptables for traffic hijacking, where the iptables rule chains has one called ISTIO_OUTPUT, which contains the following rules.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Rule&lt;/strong>&lt;/th>
&lt;th>&lt;strong>target&lt;/strong>&lt;/th>
&lt;th>&lt;strong>in&lt;/strong>&lt;/th>
&lt;th>&lt;strong>out&lt;/strong>&lt;/th>
&lt;th>&lt;strong>source&lt;/strong>&lt;/th>
&lt;th>&lt;strong>destination&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>127.0.0.6&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>ISTIO_IN_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>!localhost owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere !owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>ISTIO_IN_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>!localhost owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere !owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>localhost&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>ISTIO_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The sidecar applies these rules to deal with different types of traffic. This article will show you the six types of traffic and their iptables rules in Istio sidecar.&lt;/p>
&lt;h2 id="iptables-traffic-routing-in-sidecar">iptables Traffic Routing in Sidecar&lt;/h2>
&lt;p>The following list summarizes the six types of traffic in Sidecar.&lt;/p>
&lt;ol>
&lt;li>Remote service accessing local service: Remote Pod -&amp;gt; Local Pod&lt;/li>
&lt;li>Local service accessing remote service: Local Pod -&amp;gt; Remote Pod&lt;/li>
&lt;li>Prometheus crawling metrics of local service: Prometheus -&amp;gt; Local Pod&lt;/li>
&lt;li>Traffic between Local Pod service: Local Pod -&amp;gt; Local Pod&lt;/li>
&lt;li>Inter-process TCP traffic within Envoy&lt;/li>
&lt;li>Sidecar to Istiod traffic&lt;/li>
&lt;/ol>
&lt;p>The following will explain the iptables routing rules within Sidecar for each scenario, which specifies which rule in ISTIO_OUTPUT is used for routing.&lt;/p>
&lt;h3 id="type-1-remote-pod---local-pod">Type 1: Remote Pod -&amp;gt; Local Pod&lt;/h3>
&lt;p>The following are the iptables rules for remote services, applications or clients accessing the local pod IP of the data plane.&lt;/p>
&lt;p>Remote Pod -&amp;gt; &lt;code>RREROUTING&lt;/code> -&amp;gt; &lt;code>ISTIO_INBOUND&lt;/code> -&amp;gt; &lt;code>ISTIO_IN_REDIRECT&lt;/code> -&amp;gt; Envoy 15006 (Inbound) -&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 1&lt;/strong> -&amp;gt; &lt;code> POSTROUTING&lt;/code> -&amp;gt; Local Pod&lt;/p>
&lt;p>We see that the traffic only passes through the Envoy 15006 Inbound port once. The following diagram shows this scenario of the iptables rules.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-sidecar-traffic-types/remote-pod-local-pod.jpg" data-img="/blog/istio-sidecar-traffic-types/remote-pod-local-pod.jpg" data-width="2384" data-height="1706" alt="remote-pod-local-pod.jpg" data-caption="Remote Pod to Local Pod">
&lt;figcaption>Remote Pod to Local Pod&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h3 id="type-2-local-pod---remote-pod">Type 2: Local Pod -&amp;gt; Remote Pod&lt;/h3>
&lt;p>The following are the iptables rules that the local pod IP goes through to access the remote service.&lt;/p>
&lt;p>Local Pod-&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 9&lt;/strong> -&amp;gt; &lt;code>ISTIO_REDIRECT&lt;/code> -&amp;gt; Envoy 15001 (Outbound) -&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 4&lt;/strong> -&amp;gt; &lt;code>POSTROUTING&lt;/code> -&amp;gt; Remote Pod&lt;/p>
&lt;p>We see that the traffic only goes through the Envoy 15001 Outbound port.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-sidecar-traffic-types/local-pod-remote-pod.jpg" data-img="/blog/istio-sidecar-traffic-types/local-pod-remote-pod.jpg" data-width="2384" data-height="1704" alt="local-pod-remote-pod.jpg" data-caption="Local Pod to Remote Pod">
&lt;figcaption>Local Pod to Remote Pod&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>The traffic in both scenarios above passes through Envoy only once because only one scenario occurs in that Pod, sending or receiving requests.&lt;/p>
&lt;h3 id="type-3-prometheus---local-pod">Type 3: Prometheus -&amp;gt; Local Pod&lt;/h3>
&lt;p>Prometheus traffic that grabs data plane metrics does not have to go through the Envoy proxy.&lt;/p>
&lt;p>These traffic pass through the following iptables rules.&lt;/p>
&lt;p>Prometheus-&amp;gt; &lt;code>RREROUTING&lt;/code> -&amp;gt; &lt;code>ISTIO_INBOUND&lt;/code> (traffic destined for ports 15002, 15090 will go to &lt;code>INPUT&lt;/code>) -&amp;gt; &lt;code>INPUT&lt;/code> -&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 3&lt;/strong> -&amp;gt; &lt;code>POSTROUTING&lt;/code> -&amp;gt; Local Pod&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-sidecar-traffic-types/prometheus-local-pod.jpg" data-img="/blog/istio-sidecar-traffic-types/prometheus-local-pod.jpg" data-width="2384" data-height="1704" alt="prometheus-local-pod.jpg" data-caption="Prometheus to Local Pod">
&lt;figcaption>Prometheus to Local Pod&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h3 id="type-4-local-pod---local-pod">Type 4: Local Pod -&amp;gt; Local Pod&lt;/h3>
&lt;p>A Pod may simultaneously have two or more services. If the Local Pod accesses a service on the current Pod, the traffic will go through Envoy 15001 and Envoy 15006 ports to reach the service port of the Local Pod.&lt;/p>
&lt;p>The iptables rules for this traffic are as follows.&lt;/p>
&lt;p>Local Pod-&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 9&lt;/strong> -&amp;gt; &lt;code>ISTIO_REDIRECT&lt;/code> -&amp;gt; Envoy 15001（Outbound）-&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 2&lt;/strong> -&amp;gt; &lt;code>ISTIO_IN_REDIRECT&lt;/code> -&amp;gt; Envoy 15006（Inbound）-&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 1&lt;/strong> -&amp;gt; &lt;code>POSTROUTING&lt;/code> -&amp;gt; Local Pod&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-sidecar-traffic-types/local-pod-local-pod.jpg" data-img="/blog/istio-sidecar-traffic-types/local-pod-local-pod.jpg" data-width="2384" data-height="1704" alt="local-pod-local-pod.jpg" data-caption="Local Pod to Local Pod">
&lt;figcaption>Local Pod to Local Pod&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h3 id="type-5-inter-process-tcp-traffic-within-envoy">Type 5: Inter-process TCP traffic within Envoy&lt;/h3>
&lt;p>Envoy internal processes with UID and GID 1337 will communicate with each other using lo NICs and localhost domains.&lt;/p>
&lt;p>The iptables rules that these flows pass through are as follows.&lt;/p>
&lt;p>Envoy process (Localhost) -&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 8&lt;/strong> -&amp;gt; &lt;code>POSTROUTING&lt;/code> -&amp;gt; Envoy process (Localhost)&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-sidecar-traffic-types/envoy-internal-tcp-traffic.jpg" data-img="/blog/istio-sidecar-traffic-types/envoy-internal-tcp-traffic.jpg" data-width="2386" data-height="1706" alt="envoy-internal-tcp-traffic.jpg" data-caption="Envoy inter-process TCP traffic">
&lt;figcaption>Envoy inter-process TCP traffic&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h3 id="type-6-sidecar-to-istiod-traffic">Type 6: Sidecar to Istiod traffic&lt;/h3>
&lt;p>Sidecar needs access to Istiod to synchronize its configuration so that Envoy will have traffic sent to Istiod.&lt;/p>
&lt;p>The iptables rules that this traffic passes through are as follows.&lt;/p>
&lt;p>&lt;code>pilot-agent&lt;/code> process -&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>Istio_OUTPUT&lt;/code> RULE 9&lt;/strong> -&amp;gt; Envoy 15001 (Outbound Handler) -&amp;gt; OUTPUT -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 4&lt;/strong> -&amp;gt; &lt;code>POSTROUTING&lt;/code> -&amp;gt; Istiod&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-sidecar-traffic-types/sidecar-istiod.jpg" data-img="/blog/istio-sidecar-traffic-types/sidecar-istiod.jpg" data-width="2384" data-height="1704" alt="sidecar-istiod.jpg" data-caption="Sidecar to Istiod">
&lt;figcaption>Sidecar to Istiod&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>All the sidecar proxies that Istio injects into the Pod or installed in the virtual machine form the data plane of the service mesh, which is also the main workload location of Istio. In my next blog, I will take you through the ports of each component in Envoy and their functions, so that we can have a more comprehensive understanding of the traffic in Istio.&lt;/p></description></item><item><title>What's new in Istio 1.13?</title><link>https://sdmx.io/blog/what-is-new-in-istio-1-13/</link><pubDate>Mon, 28 Mar 2022 16:43:27 +0800</pubDate><guid>https://sdmx.io/blog/what-is-new-in-istio-1-13/</guid><description>
&lt;p>Istio 1.13 is the first release of 2022, and, not surprisingly, the Istio team will continue to release new versions every quarter. Overall, the new features in this release include:&lt;/p>
&lt;ul>
&lt;li>Support for newer versions of Kubernetes&lt;/li>
&lt;li>New API – ProxyConfig, for configuring sidecar proxies&lt;/li>
&lt;li>Improved Telemetry API&lt;/li>
&lt;li>Support for hostname-based load balancers with multiple network gateways&lt;/li>
&lt;/ul>
&lt;h3 id="support-for-kubernetes-versions">Support for Kubernetes Versions&lt;/h3>
&lt;p>I often see people asking in the community which Istio supports Kubernetes versions. Istio’s website has a clear list of supported Kubernetes versions. You can see &lt;a href="https://istio.io/latest/docs/releases/supported-releases/#support-status-of-istio-releases" title="here" target="_blank" rel="noopener">here&lt;/a>
that Istio 1.13 supports Kubernetes versions 1.20, 1.21, 1.22, and 1.23, and has been tested but not officially supported in Kubernetes 1.16, 1.17, 1.18, 1.19.&lt;/p>
&lt;p>When configuring Istio, there are a lot of checklists. I noted them all in the &lt;a href="https://github.com/tetratelabs/istio-cheatsheet" title="Istio cheatsheet" target="_blank" rel="noopener">Istio cheatsheet&lt;/a>
. There are a lot of cheat sheets about configuring Istio, using resources, dealing with everyday problems, etc., in this project, which will be online soon, so stay tuned.&lt;/p>
&lt;p>The following screenshot is from the Istio cheatsheet website, it shows the basic cheat sheet for setting up Istio.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/what-is-new-in-istio-1-13/istio-cheatsheet.jpg" data-img="/blog/what-is-new-in-istio-1-13/istio-cheatsheet.jpg" data-width="1728" data-height="1080" alt="istio-cheatsheet.jpg" data-caption="Istio cheatsheet">
&lt;figcaption>Istio cheatsheet&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h3 id="introducing-the-new-proxyconfig-api">Introducing the new ProxyConfig API&lt;/h3>
&lt;p>Before Istio version 1.13, if you wanted to customize the configuration of the sidecar proxy, there were two ways to do it.&lt;/p>
&lt;p>&lt;strong>MeshConfig&lt;/strong>&lt;/p>
&lt;p>Use MeshConfig and use IstioOperator to modify it at the Mesh level. For example, use the following configuration to alter the default discovery port for istiod.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">install.istio.io/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IstioOperator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">meshConfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultConfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">discoveryAddress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">istiod:15012&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Annotation in the Pods&lt;/strong>&lt;/p>
&lt;p>You can also use annotation at the Pod level to customize the configuration. For example, you can add the following annotations to Pod to modify the default port for &lt;code>istiod&lt;/code> of the workload:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">anannotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">proxy.istio.io/config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">discoveryAddress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">istiod:15012&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you configure sidecar in either of these ways, the fields set in annotations will completely override the default fields in MeshConfig. Please refer to the &lt;a href="https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#ProxyConfig" title="Istio documentation" target="_blank" rel="noopener">Istio documentation&lt;/a>
for all configuration items of ProxyConfig.&lt;/p>
&lt;p>&lt;strong>The new API – ProxyConfig&lt;/strong>&lt;/p>
&lt;p>But in 1.13, a new top-level custom resource, ProxyConfig, has been added, allowing you to customize the configuration of your sidecar proxy in one place by specifying a namespace and using a selector to select the scope of the workload, just like any other CRD. Istio currently has limited support for this API, so please refer to the &lt;a href="https://istio.io/latest/docs/reference/config/networking/proxy-config/" title="Istio documentation" target="_blank" rel="noopener">Istio documentation&lt;/a>
for more information on the ProxyConfig API.&lt;/p>
&lt;p>However, no matter which way you customize the configuration of the sidecar proxy, it does not take effect dynamically and requires a workload restart to take effect. For example, for the above configuration, because you changed the default port of istiod, all the workloads in the mesh need to be restarted before connecting to the control plane.&lt;/p>
&lt;h3 id="telemetry-api">Telemetry API&lt;/h3>
&lt;p>&lt;a href="https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-ExtensionProvider" title="MeshConfig" target="_blank" rel="noopener">MeshConfig&lt;/a>
customized extensions and configurations in the Istio mesh. The three pillars of observability– Metrics, Telemetry, and Logging– can each be docked to different providers. The &lt;a href="https://istio.io/latest/docs/tasks/observability/telemetry/" title="Telemetry API" target="_blank" rel="noopener">Telemetry API&lt;/a>
gives you a one-stop place for flexible configuration of them. Like the ProxyConfig API, the Telemetry API follows the configuration hierarchy of Workload Selector &amp;gt; Local Namespace &amp;gt; Root Configuration Namespace. The API was introduced in Istio 1.11 and has been further refined in that release to add support for OpenTelemetry logs, filtered access logs, and custom tracing service names. See &lt;a href="https://istio.io/latest/docs/reference/config/telemetry/" title="Telemetry Configuration" target="_blank" rel="noopener">Telemetry Configuration&lt;/a>
for details.&lt;/p>
&lt;h3 id="automatic-resolution-of-multi-network-gateway-hostnames">Automatic resolution of multi-network gateway hostnames&lt;/h3>
&lt;p>In September 2021, a member of the Istio community &lt;a href="https://szabo.jp/2021/09/22/multicluster-istio-on-eks/" title="reported an issue" target="_blank" rel="noopener">reported an issue&lt;/a>
with the EKS load balancer failing to resolve when running multi-cluster Istio in AWS EKS. Workloads that cross cluster boundaries need to be communicated indirectly through a dedicated east-west gateway for a multi-cluster, multi-network mesh. You can follow the instructions on &lt;a href="https://istio.io/latest/docs/setup/install/multicluster/multi-primary_multi-network/" title="Istio’s website" target="_blank" rel="noopener">Istio’s website&lt;/a>
to configure a multi-network, primary-remote cluster, and Istio will automatically resolve the IP address of the load balancer based on the hostname.&lt;/p>
&lt;h3 id="istio-1131-fixing-the-critical-security-vulnerabilities">Istio 1.13.1 fixing the critical security vulnerabilities&lt;/h3>
&lt;p>Istio 1.13.1 was released to fix a known &lt;a href="https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CVE-2022-23635" title="critical vulnerability" target="_blank" rel="noopener">critical vulnerability&lt;/a>
that could lead to an unauthenticated control plane denial of service attack.&lt;/p>
&lt;p>The figure below shows a multi-cluster primary-remote mesh where istiod exposes port 15012 to the public Internet via a gateway so that a pod on another network can connect to it.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/what-is-new-in-istio-1-13/multi-network-mesh.jpg" data-img="/blog/what-is-new-in-istio-1-13/multi-network-mesh.jpg" data-width="1299" data-height="1080" alt="multi-network-mesh.jpg" data-caption="Multi-network Mesh">
&lt;figcaption>Multi-network Mesh&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>When installing a multi-network, primary-remote mode Istio mesh, for a remote Kubernetes cluster to access the control plane, an east-west Gateway needs to be installed in the Primary cluster, exposing port 15012 of the control plane istiod to the Internet. An attacker could send specially crafted messages to that port, causing the control plane to crash. If you set up a firewall to allow traffic from only some IPs to access this port, you will be able to reduce the impact of the problem. It is recommended that you upgrade to Istio 1.13.1 immediately to resolve the issue completely.&lt;/p>
&lt;h3 id="istiocon-2022">IstioCon 2022&lt;/h3>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/what-is-new-in-istio-1-13/istiocon-2022.jpg" data-img="/blog/what-is-new-in-istio-1-13/istiocon-2022.jpg" data-width="1318" data-height="736" alt="istiocon-2022.jpg" data-caption="IstioCon 2022">
&lt;figcaption>IstioCon 2022&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Finally, as a committee member for the last and current IstioCon, I call on everyone to register for &lt;a href="https://events.istio.io/istiocon-2022/" title="IstioCon 2022" target="_blank" rel="noopener">IstioCon 2022&lt;/a>
, which will be held online on April 25! It will be an industry-focused event, a platform to connect contributors and users to discuss the uses of Istio in different architectural setups, its limitations, and where to take the project next. The main focus on end-user companies, as we look forward to sharing a diversity of case studies showing how to use Istio in production.&lt;/p></description></item><item><title>Service Mesh in 2021: the ecosystem is emerging</title><link>https://sdmx.io/blog/service-mesh-in-2021/</link><pubDate>Wed, 12 Jan 2022 16:43:27 +0800</pubDate><guid>https://sdmx.io/blog/service-mesh-in-2021/</guid><description>
&lt;p>As the service mesh architecture concept gains traction and the scenarios for its applications emerge, there is no shortage of discussions about it in the community. I have worked on service mesh with the community for 4 years now, and will summarize the development of service mesh in 2021 from this perspective. Since Istio is the most popular service mesh, this article will focus on the technical and ecological aspects of Istio.&lt;/p>
&lt;h2 id="service-mesh-a-critical-tech-for-cloud-native-infrastructure">Service mesh: a critical tech for Cloud Native Infrastructure&lt;/h2>
&lt;p>As one of the vital technologies &lt;a href="https://github.com/cncf/toc/blob/main/DEFINITION.md" title="defined by CNCF" target="_blank" rel="noopener">defined by CNCF&lt;/a>
for cloud native, Istio has been around for five years now. Their development has gone through the following periods.&lt;/p>
&lt;ul>
&lt;li>Exploration phase: 2017-2018&lt;/li>
&lt;li>Early adopter phase: 2019-2020&lt;/li>
&lt;li>Large-scale landing and ecological development phase: 2021-present&lt;/li>
&lt;/ul>
&lt;p>Service mesh has crossed the “chasm”(refer &lt;a href="https://thinkinsights.net/strategy/crossing-the-chasm/" title="Crossing the Chasm" target="_blank" rel="noopener">Crossing the Chasm&lt;/a>
theory) and is in between the “early majority” and “late majority” phases of adoption. Based on feedback from the audience of &lt;a href="https://github.com/tetratelabs/istio-weekly/" title="Istio Weekly," target="_blank" rel="noopener">Istio Weekly,&lt;/a>
users are no longer blindly following new technologies for experimentation and are starting to consider whether they need them in their organization dialectically.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/service-mesh-in-2021/008i3skNly1gysddnj9i2j30sg0fqaaz.jpg" data-img="/blog/service-mesh-in-2021/008i3skNly1gysddnj9i2j30sg0fqaaz.jpg" data-width="1024" data-height="566" alt="008i3skNly1gysddnj9i2j30sg0fqaaz.jpg" data-caption="Cross the chasm">
&lt;figcaption>Cross the chasm&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>While new technologies and products continue to emerge, the service mesh, as part of the cloud native technology stack, has continued to solidify its position as the “cloud native network infrastructure” over the past year. The diagram below illustrates the cloud native technology stack model, where each layer has several representative technologies that define the standard. As new-age middleware, the service mesh mirrors other cloud native technologies, such as &lt;a href="https://dapr.io/" title="Dapr" target="_blank" rel="noopener">Dapr&lt;/a>
(Distributed Application Runtime), which represents the capability model for cloud native middleware, &lt;a href="https://oam.dev/" title="OAM" target="_blank" rel="noopener">OAM&lt;/a>
, which defines the cloud native application model, and the service mesh, which defines the L7 network model.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/service-mesh-in-2021/008i3skNly1gysddogtenj30sg0qlwgs.jpg" data-img="/blog/service-mesh-in-2021/008i3skNly1gysddogtenj30sg0qlwgs.jpg" data-width="1024" data-height="957" alt="008i3skNly1gysddogtenj30sg0qlwgs.jpg" data-caption="Cloud Native Stack">
&lt;figcaption>Cloud Native Stack&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>A layered view of the cloud native application platform technology stack&lt;/p>
&lt;h2 id="optimizing-the-mesh-for-large-scale-production-applications-with-different-deployment-models">Optimizing the mesh for large scale production applications with different deployment models&lt;/h2>
&lt;p>Over the past year, the community focused on the following areas.&lt;/p>
&lt;ul>
&lt;li>Performance optimization: performance issues of service mesh in large-scale application scenarios.&lt;/li>
&lt;li>Protocol and extensions: enabling service mesh to support arbitrary L7 network protocols.&lt;/li>
&lt;li>Deployment models: Proxyless vs. Node model vs. Sidecar model.&lt;/li>
&lt;li>eBPF: putting some of the service mesh’s capabilities to the kernel layer.&lt;/li>
&lt;/ul>
&lt;h3 id="performance-optimization">Performance optimization&lt;/h3>
&lt;p>Istio was designed to serve service to service traffic by “proto-protocol forwarding”. The goal is making the service mesh as “transparent” as possible to applications. Thus using IPtables to hijack the traffic, according to the community-provided test results Istio 1.2 adds only 3 ms to the baseline latency for a mesh with 1000 RPS on 16 connections. However, because of issues inherent in the IPtables conntrack module, Istio’s performance issues begin to emerge as the mesh size increases. To optimize the performance of the Istio sidecar for resource usage and network latency, the community gave the following solutions.&lt;/p>
&lt;ul>
&lt;li>Sidecar configuration: By configuring service dependencies manually or by adding an Operator to the control plane, the number of service configurations sent to Sidecar can be reduced, thus reducing the resource footprint of the data plane; for more automatic and intelligent configuration of Sidecar, the open source projects &lt;a href="https://github.com/slime-io/slime" title="Slime" target="_blank" rel="noopener">Slime&lt;/a>
and &lt;a href="https://github.com/aeraki-framework/aeraki" title="Aeraki" target="_blank" rel="noopener">Aeraki&lt;/a>
both offer their innovative configuration loading solutions.&lt;/li>
&lt;li>The introduction of eBPF: eBPF can be a viable solution to optimize the performance of the service mesh. Some Cilium-based startups even radically propose to use eBPF to replace the Sidecar proxy completely. Still, the Envoy proxy/xDS protocol has become the proxy for the service mesh implementation and supports the Layer 7 protocol very well. We can use eBPF to improve network performance, but complex protocol negotiation, parsing, and user scaling remain challenging to implement on the user side.&lt;/li>
&lt;/ul>
&lt;h3 id="protocol-and-extensions">Protocol and extensions&lt;/h3>
&lt;p>Extensibility of Istio has always been a significant problem, and there are two aspects to Istio’s extensibility.&lt;/p>
&lt;ul>
&lt;li>Protocol level: allowing Istio to support all L7 protocols&lt;/li>
&lt;li>Ecological: allowing Istio to run more extensions&lt;/li>
&lt;/ul>
&lt;p>Istio uses Envoy as its data plane. Extending Istio is essentially an extension of Envoy’s functionality. Istio’s official solution is to use WebAssembly, and in Istio 1.12, the &lt;a href="https://www.tetrate.io/blog/istio-wasm-extensions-and-ecosystem/" title="Wasm plugin configuration API" target="_blank" rel="noopener">Wasm plugin configuration API&lt;/a>
was introduced to extend the Istio ecosystem. Istio’s extension mechanism uses the &lt;a href="https://github.com/proxy-wasm/spec" title="Proxy-Wasm Application Binary Interface (ABI)" target="_blank" rel="noopener">Proxy-Wasm Application Binary Interface (ABI)&lt;/a>
specification to provide a set of proxy-independent streaming APIs and utilities that can be implemented in any language with an appropriate SDK. Today, Proxy-Wasm’s SDKs are AssemblyScript (similar to TypeScript), C++, Rust, Zig, and Go (using the TinyGo WebAssembly System Interface).&lt;/p>
&lt;p>There are still relatively few WebAssembly extensions available, and many enterprises choose to customize their CRD and build a service mesh management plane based on Istio. In addition, making Istio support heterogeneous environments for all workloads, such as virtual machines and containers, is also in strong demand for end-users. It allows them to migrate applications from traditional loads to service mesh easily. Finally, there is the hybrid cloud traffic management with multiple clusters and mesh, which is a more advanced requirement.&lt;/p>
&lt;h3 id="deployment-models">Deployment models&lt;/h3>
&lt;p>When the service mesh concept first emerged, there was a debate between the Per-node and Sidecar models, represented by Linkerd and Istio. eBPF later proposed a kernel to sink the service mesh, which led to more service mesh deployment models, as shown in the figure below.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/service-mesh-in-2021/008i3skNly1gysddpco2mj30qz0sgwhk.jpg" data-img="/blog/service-mesh-in-2021/008i3skNly1gysddpco2mj30qz0sgwhk.jpg" data-width="971" data-height="1024" alt="008i3skNly1gysddpco2mj30qz0sgwhk.jpg" data-caption="Service Mesh Deployment Models">
&lt;figcaption>Service Mesh Deployment Models&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>These four deployment methods have their own advantages and disadvantages, the specific choice of which depends on the actual situation.&lt;/p>
&lt;h3 id="development-of-the-istio-ecosystem-and-the-projects-that-support-istio">Development of the Istio ecosystem and the projects that support Istio&lt;/h3>
&lt;p>2021 was also an exciting year for the Istio community, with a series of events and tutorials.&lt;/p>
&lt;ul>
&lt;li>February, the first Istio distribution, &lt;a href="https://istio.tetratelabs.io/" title="Tetrate Istio Distro (TID)" target="_blank" rel="noopener">Tetrate Istio Distro (TID)&lt;/a>
.&lt;/li>
&lt;li>February, the first &lt;a href="https://events.istio.io/istiocon-2021/" title="IstioCon" target="_blank" rel="noopener">IstioCon&lt;/a>
was held online, with over 2,000 participants.&lt;/li>
&lt;li>March, the first free online &lt;a href="https://academy.tetrate.io/courses/istio-fundamentals" title="Istio Fundamentals Course" target="_blank" rel="noopener">Istio Fundamentals Course&lt;/a>
is released.&lt;/li>
&lt;li>May, the first &lt;a href="https://academy.tetrate.io/courses/certified-istio-administrator" title="Certification Istio Administrator exam" target="_blank" rel="noopener">Certification Istio Administrator exam&lt;/a>
be released.&lt;/li>
&lt;li>May, ServiceMeshCon Europe was held online.&lt;/li>
&lt;li>July, &lt;a href="https://istio.io/latest/zh/blog/2021/istiomeetups-china/" title="Istio Meetup China" target="_blank" rel="noopener">Istio Meetup China&lt;/a>
was held in Beijing with more than 100 attendees.&lt;/li>
&lt;li>October, ServiceMeshCon North America was held in Los Angeles.&lt;/li>
&lt;/ul>
&lt;p>There are also numerous open source projects related to Istio Service Mesh, as shown in the table below.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Project&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Value&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Relationship with Istio&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Category&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Launch Date&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Dominant company&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Number of stars&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://github.com/envoyproxy/envoy" title="Envoy" target="_blank" rel="noopener">Envoy&lt;/a>
&lt;/td>
&lt;td>Cloud native high-performance edge/middle-service proxy&lt;/td>
&lt;td>The default data plane&lt;/td>
&lt;td>proxy&lt;/td>
&lt;td>September 2016&lt;/td>
&lt;td>Lyft&lt;/td>
&lt;td>18700&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/istio/istio/" title="Istio" target="_blank" rel="noopener">Istio&lt;/a>
&lt;/td>
&lt;td>Connection, secure, control, and observation services.&lt;/td>
&lt;td>Control plane&lt;/td>
&lt;td>service mesh&lt;/td>
&lt;td>May 2017&lt;/td>
&lt;td>Google&lt;/td>
&lt;td>29100&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/emissary-ingress/emissary" title="Emissary Gateway" target="_blank" rel="noopener">Emissary Gateway&lt;/a>
&lt;/td>
&lt;td>Kubernetes native API gateway for microservices, built on Envoy&lt;/td>
&lt;td>Connectable to Istio&lt;/td>
&lt;td>gateway&lt;/td>
&lt;td>February 2018&lt;/td>
&lt;td>Ambassador&lt;/td>
&lt;td>3600&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/apache/apisix" title="APISIX" target="_blank" rel="noopener">APISIX&lt;/a>
&lt;/td>
&lt;td>Cloud native API gateways&lt;/td>
&lt;td>It can run as a data plane for Istio or as a gateway on its own&lt;/td>
&lt;td>gateway&lt;/td>
&lt;td>June 2019&lt;/td>
&lt;td>API7&lt;/td>
&lt;td>8100&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/mosn/mosn" title="MOSN" target="_blank" rel="noopener">MOSN&lt;/a>
&lt;/td>
&lt;td>Cloud native edge gateways &amp;amp; agents&lt;/td>
&lt;td>Available as Istio data plane&lt;/td>
&lt;td>proxy&lt;/td>
&lt;td>December 2019&lt;/td>
&lt;td>Ant&lt;/td>
&lt;td>3500&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/slime-io/slime" title="Slime" target="_blank" rel="noopener">Slime&lt;/a>
&lt;/td>
&lt;td>Intelligent service mesh manager based on Istio&lt;/td>
&lt;td>Adding a management plane to Istio&lt;/td>
&lt;td>extensions&lt;/td>
&lt;td>January 2021&lt;/td>
&lt;td>NetEase&lt;/td>
&lt;td>236&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/tetratelabs/getmesh" title="GetMesh" target="_blank" rel="noopener">GetMesh&lt;/a>
&lt;/td>
&lt;td>Istio integration and command-line management tools&lt;/td>
&lt;td>Utility for Istio multi-version management&lt;/td>
&lt;td>tools&lt;/td>
&lt;td>February 2021&lt;/td>
&lt;td>Tetrate&lt;/td>
&lt;td>95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/aeraki-framework/aeraki" title="Aeraki" target="_blank" rel="noopener">Aeraki&lt;/a>
&lt;/td>
&lt;td>Manage any of Istio’s seven layers of load&lt;/td>
&lt;td>Extended multi-protocol support&lt;/td>
&lt;td>extensions&lt;/td>
&lt;td>March 2021&lt;/td>
&lt;td>Tencent&lt;/td>
&lt;td>330&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/mosn/layotto/" title="Layotto" target="_blank" rel="noopener">Layotto&lt;/a>
&lt;/td>
&lt;td>Cloud native application runtime&lt;/td>
&lt;td>Using as a data plane for Istio&lt;/td>
&lt;td>runtime&lt;/td>
&lt;td>June 2021&lt;/td>
&lt;td>Ant&lt;/td>
&lt;td>393&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/hango-io/hango-gateway" title="Hango Gateway" target="_blank" rel="noopener">Hango Gateway&lt;/a>
&lt;/td>
&lt;td>API gateways built on Envoy and Istio&lt;/td>
&lt;td>Integrates with Istio&lt;/td>
&lt;td>gateway&lt;/td>
&lt;td>August 2021&lt;/td>
&lt;td>NetEase&lt;/td>
&lt;td>253&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Note: Data is as of January 6, 2022&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Looking back, we can see that, unlike previous years where users were experimenting, users in 2021 looked for more practical uses for service mesh before implementing them. Their position as the infrastructure of cloud native networks is further strengthened, and more importantly, the service mesh ecosystem is emerging. Looking ahead, in 2022, two technologies to watch are eBPF and WebAssembly(Wasm). We believe that more good examples of service mesh practices will emerge, taking the ecology and standardization a step further.&lt;/p></description></item><item><title>Introducing Slime and Aeraki in the evolution of Istio open-source ecosystem</title><link>https://sdmx.io/blog/istio-extensions-slime-and-aeraki/</link><pubDate>Mon, 10 Jan 2022 16:43:27 +0800</pubDate><guid>https://sdmx.io/blog/istio-extensions-slime-and-aeraki/</guid><description>
&lt;p>It’s been more than &lt;a href="https://www.tetrate.io/blog/happy-istio-4th-anniversary-retrospect-and-outlook/" title="four years" target="_blank" rel="noopener">four years&lt;/a>
since Istio launched in May 2017, and while the project has had a strong following on GitHub and 10+ releases, its growing open-source ecosystem is still in its infancy.&lt;/p>
&lt;p>Recently added support for &lt;a href="https://www.tetrate.io/blog/istio-wasm-extensions-and-ecosystem/" title="WebAssembly extensions" target="_blank" rel="noopener">WebAssembly extensions&lt;/a>
has made the most popular open source service mesh more extensible than ever. This table lists the open-source projects in the Istio ecosystem as of November 11, 2021, sorted by open-source date. These projects enhance the Istio service mesh with gateways, extensions, utilities, and more. In this article, I’ll highlight the two new projects in the category of extensions.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Project&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Value&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Relationship with Istio&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Category&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Launch Date&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Dominant company&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Number of stars&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://github.com/envoyproxy/envoy" title="Envoy" target="_blank" rel="noopener">Envoy&lt;/a>
&lt;/td>
&lt;td>Cloud native high-performance edge/middle-service proxy&lt;/td>
&lt;td>The default data plane&lt;/td>
&lt;td>proxy&lt;/td>
&lt;td>September 2016&lt;/td>
&lt;td>Lyft&lt;/td>
&lt;td>18700&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/istio/istio/" title="Istio" target="_blank" rel="noopener">Istio&lt;/a>
&lt;/td>
&lt;td>Connection, secure, control, and observation services.&lt;/td>
&lt;td>Control plane&lt;/td>
&lt;td>service mesh&lt;/td>
&lt;td>May 2017&lt;/td>
&lt;td>Google&lt;/td>
&lt;td>29100&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/emissary-ingress/emissary" title="Emissary Gateway" target="_blank" rel="noopener">Emissary Gateway&lt;/a>
&lt;/td>
&lt;td>Kubernetes native API gateway for microservices, built on Envoy&lt;/td>
&lt;td>Connectable to Istio&lt;/td>
&lt;td>gateway&lt;/td>
&lt;td>February 2018&lt;/td>
&lt;td>Ambassador&lt;/td>
&lt;td>3600&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/apache/apisix" title="APISIX" target="_blank" rel="noopener">APISIX&lt;/a>
&lt;/td>
&lt;td>Cloud native API gateways&lt;/td>
&lt;td>It can run as a data plane for Istio or as a gateway on its own&lt;/td>
&lt;td>gateway&lt;/td>
&lt;td>June 2019&lt;/td>
&lt;td>API7&lt;/td>
&lt;td>8100&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/mosn/mosn" title="MOSN" target="_blank" rel="noopener">MOSN&lt;/a>
&lt;/td>
&lt;td>Cloud native edge gateways &amp;amp; agents&lt;/td>
&lt;td>Available as Istio data plane&lt;/td>
&lt;td>proxy&lt;/td>
&lt;td>December 2019&lt;/td>
&lt;td>Ant&lt;/td>
&lt;td>3500&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/slime-io/slime" title="Slime" target="_blank" rel="noopener">Slime&lt;/a>
&lt;/td>
&lt;td>Intelligent service mesh manager based on Istio&lt;/td>
&lt;td>Adding a management plane to Istio&lt;/td>
&lt;td>extensions&lt;/td>
&lt;td>January 2021&lt;/td>
&lt;td>NetEase&lt;/td>
&lt;td>236&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/tetratelabs/getmesh" title="GetMesh" target="_blank" rel="noopener">GetMesh&lt;/a>
&lt;/td>
&lt;td>Istio integration and command-line management tools&lt;/td>
&lt;td>Utility for Istio multi-version management&lt;/td>
&lt;td>tools&lt;/td>
&lt;td>February 2021&lt;/td>
&lt;td>Tetrate&lt;/td>
&lt;td>95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/aeraki-framework/aeraki" title="Aeraki" target="_blank" rel="noopener">Aeraki&lt;/a>
&lt;/td>
&lt;td>Manage any of Istio’s seven layers of load&lt;/td>
&lt;td>Extended multi-protocol support&lt;/td>
&lt;td>extensions&lt;/td>
&lt;td>March 2021&lt;/td>
&lt;td>Tencent&lt;/td>
&lt;td>330&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/mosn/layotto/" title="Layotto" target="_blank" rel="noopener">Layotto&lt;/a>
&lt;/td>
&lt;td>Cloud native application runtime&lt;/td>
&lt;td>Using as a data plane for Istio&lt;/td>
&lt;td>runtime&lt;/td>
&lt;td>June 2021&lt;/td>
&lt;td>Ant&lt;/td>
&lt;td>393&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/hango-io/hango-gateway" title="Hango Gateway" target="_blank" rel="noopener">Hango Gateway&lt;/a>
&lt;/td>
&lt;td>API gateways built on Envoy and Istio&lt;/td>
&lt;td>Integrates with Istio&lt;/td>
&lt;td>gateway&lt;/td>
&lt;td>August 2021&lt;/td>
&lt;td>NetEase&lt;/td>
&lt;td>253&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="slime-an-intelligent-service-mesh-manager-for-istio">&lt;strong>Slime: an intelligent service mesh manager for Istio&lt;/strong>&lt;/h3>
&lt;p>&lt;a href="https://github.com/slime-io/slime" title="Slime" target="_blank" rel="noopener">Slime&lt;/a>
is an Istio-based, intelligent mesh manager open-sourced by NetEase’s microservices team. Based on the Kubernetes Operator implementation, Slime can be used as a CRD manager that seamlessly interfaces with Istio without needing any customization or definition of dynamic service governance policies. This achieves automatic and convenient use of Istio and Envoy’s advanced features.&lt;/p>
&lt;p>Slime addresses the following issues:&lt;/p>
&lt;ul>
&lt;li>Implementing higher-level extensions in Istio. For example, extending the HTTP plugin; adaptive traffic limiting based on the resource usage of the service.&lt;/li>
&lt;li>Poor performance arising from Istio sending all the configurations within the mesh to each sidecar proxy.&lt;/li>
&lt;/ul>
&lt;p>Slime solves these problems by building an Istio management plane. Its main purpose are&lt;/p>
&lt;ul>
&lt;li>to build a pluggable controller to facilitate the extension of new functions.&lt;/li>
&lt;li>to obtain data by listening to the data plane to intelligently generate the configuration for Istio.&lt;/li>
&lt;li>to build a higher-level CRD for the user to configure, which Slime converts into an Istio configuration.&lt;/li>
&lt;/ul>
&lt;p>The following diagram shows the flow chart of Istio as an Istio management plane.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-extensions-slime-and-aeraki/slime-arch.png" data-img="/blog/istio-extensions-slime-and-aeraki/slime-arch.png" data-width="1921" data-height="1081" alt="slime-arch.png" data-caption="Slime architecture">
&lt;figcaption>Slime architecture&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>The specific steps for Slime to manage Istio are as follows.&lt;/p>
&lt;ol>
&lt;li>Slime operator completes the initialization of Slime components in Kubernetes based on the administrator’s configuration.&lt;/li>
&lt;li>Developers create configurations that conform to the Slime CRD specification and apply them to Kubernetes clusters.&lt;/li>
&lt;li>Slime queries the monitoring data of the relevant service stored in Prometheus and converts the Slime CRD into an Istio CRD, in conjunction with the configuration of the adaptive part of the Slime CRD while pushing it to the Global Proxy.&lt;/li>
&lt;li>Istio listens for the creation of Istio CRDs.&lt;/li>
&lt;li>Istio pushes the configuration information of the Sidecar Proxy to the corresponding Sidecar Proxy in the data plane.&lt;/li>
&lt;/ol>
&lt;p>The diagram below shows the internal architecture of Slime.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-extensions-slime-and-aeraki/slime-internal.png" data-img="/blog/istio-extensions-slime-and-aeraki/slime-internal.png" data-width="1921" data-height="1081" alt="slime-internal.png" data-caption="Slime Internal">
&lt;figcaption>Slime Internal&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>We can divide Slime internally into three main components.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>slime-boot&lt;/strong>: operator for deploying Slime modules on Kubernetes.&lt;/li>
&lt;li>&lt;strong>slime-controller&lt;/strong>: the core component of Slime that listens to the Slime CRD and converts it to an Istio CRD.&lt;/li>
&lt;li>&lt;strong>slime-metric&lt;/strong>: the component used to obtain service metrics information. slime-controller dynamically adjusts service governance rules based on the information it receives.&lt;/li>
&lt;/ul>
&lt;p>The following diagram shows the architecture of Slime Adaptive Traffic Limiting.
&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-extensions-slime-and-aeraki/slime-smart-filter.png" data-img="/blog/istio-extensions-slime-and-aeraki/slime-smart-filter.png" data-width="1920" data-height="1081" alt="slime-smart-filter.png" data-caption="Slime smart limiter">
&lt;figcaption>Slime smart limiter&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Slime dynamically configures traffic limits by interfacing with the Prometheus metric server to obtain real-time monitoring.&lt;/p>
&lt;p>Slime’s adaptive traffic limitation process has two parts: one that converts SmartLimiter to&lt;a href="https://istio.io/latest/docs/reference/config/networking/envoy-filter/" title=" EnvoyFilter" target="_blank" rel="noopener"> EnvoyFilter&lt;/a>
and the other that monitors the data. Slime also provides an external monitoring data interface (Metric Discovery Server) that allows you to sync custom monitoring metrics to the traffic limiting component via MDS.&lt;/p>
&lt;p>The CRD SmartLimiter created by Slime is used to configure adaptive traffic limiting. Its configuration is close to natural semantics, e.g., if you want to trigger an access limit for Service A with a limit of 30QPS when the CPU exceeds 80%, the corresponding SmartLimiter is defined as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">microservice.netease.com/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">SmartLimiter&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">a&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">descriptors&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fill_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">seconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">quota&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;30/{pod}&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 30 is the quota for this service. If there are three pods, the limit is 10 per pod.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">condition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;{cpu}&amp;gt;0.8&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Auto-fill the template based on the value of the monitor {cpu}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="aeraki-a-non-invasive-istio-extension-toolset">&lt;strong>Aeraki: A Non-Invasive Istio Extension Toolset&lt;/strong>&lt;/h3>
&lt;p>&lt;a href="https://github.com/aeraki-framework/aeraki" title="Aeraki" target="_blank" rel="noopener">Aeraki&lt;/a>
is a service mesh project open sourced by Tencent Cloud in March 2021. Aeraki provides an end-to-end cloud-native service mesh protocol extension solution that provides Istio with powerful third-party protocol extension capabilities in a non-intrusive way, supporting traffic management for Dubbo, Thrift, Redis, and private protocols in Istio. Aeraki’s architecture is shown in the following diagram.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-extensions-slime-and-aeraki/aeraki-architecture.png" data-img="/blog/istio-extensions-slime-and-aeraki/aeraki-architecture.png" data-width="1920" data-height="1081" alt="aeraki-architecture.png" data-caption="Aeraki architecture">
&lt;figcaption>Aeraki architecture&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Aeraki architecture, source &lt;a href="https://istio.io/latest/blog/2021/aeraki/" title="Istio blog" target="_blank" rel="noopener">Istio blog&lt;/a>
.&lt;/p>
&lt;p>As seen in the Aeraki architecture diagram, the Aeraki protocol extension solution consists of two components.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Aeraki&lt;/strong>: Aeraki runs as an Istio enhancement component on the control plane, providing user-friendly traffic rule configurations to operations via CRDs. Aeraki translates these traffic rule configurations into Envoy configurations distributed via Istio to sidecar proxies on the data plane. Aeraki also acts as an RDS server providing dynamic routing to the MetaProtocol Proxy on the data plane. The RDS provided by Aeraki differs from Envoy’s RDS in that Envoy RDS primarily offers dynamic routing for the HTTP protocol, while Aeraki RDS is designed to provide dynamic routing capabilities for all L7 protocols developed on the MetaProtocol framework.&lt;/li>
&lt;li>&lt;strong>MetaProtocol Proxy&lt;/strong>: A generic L7 protocol proxy based on Envoy implementation. MetaProtocol Proxy is an extension of Envoy. It unifies the basic capabilities of service discovery, load balancing, RDS dynamic routing, traffic mirroring, fault injection, local/global traffic limiting, etc. for L7 protocols, which greatly reduces the difficulty of developing third-party protocols on Envoy and allows you to quickly create a third-party protocol plug-in based on MetaProtocol by only implementing the codec interface.&lt;/li>
&lt;/ul>
&lt;p>Before the introduction of MetaProtocol Proxy, if you wanted to use Envoy to implement an L7 protocol to implement routing, traffic limiting, telemetry, etc., you needed to write a complete TCP filter, which would have required a lot of work. For most L7 protocols, the required traffic management capabilities are similar, so there is no need to duplicate this work in each L7 filter implementation. The Aeraki project uses a MetaProtocol Proxy to implement these unified capabilities, as shown in the following figure.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-extensions-slime-and-aeraki/metaprotocol-proxy.png" data-img="/blog/istio-extensions-slime-and-aeraki/metaprotocol-proxy.png" data-width="3000" data-height="1081" alt="metaprotocol-proxy.png" data-caption="MetaProtocol proxy">
&lt;figcaption>MetaProtocol proxy&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>MetaProtocol proxy, source &lt;a href="https://istio.io/latest/blog/2021/aeraki/" title="Istio blog" target="_blank" rel="noopener">Istio blog&lt;/a>
.&lt;/p>
&lt;p>Based on MetaProtocol Proxy, we only need to implement the codec interface part of the code to write a new L7 protocol Envoy Filter. In addition, without adding a single line of code, Aeraki can provide configuration distribution and RDS dynamic routing configuration for this L7 protocol at the control plane.&lt;/p>
&lt;h3 id="make-istio-work-for-all-environments-and-workloads">&lt;strong>Make Istio work for all environments and workloads&lt;/strong>&lt;/h3>
&lt;p>We have seen that NetEase and Tencent are scaling Istio mainly by building Operator. However, this scaling is not enough for multi-cluster management. We know that much of our current infrastructure is transitioning to cloud native or containerized, which means containers, virtual machines, and other environments co-exist. How do we unify traffic management of these different environments? It is possible to do so using Istio.&lt;/p>
&lt;p>You have to again build a management plane on top of Istio and add an abstraction layer to add CRDs that apply to cluster management, such as cluster traffic configuration, policy configuration, etc. Additionally, you have to deploy a Gateway in each cluster that connects uniformly to an edge proxy that interconnects all the groups.&lt;/p>
&lt;p>To learn more about Tetrate Service Bridge (TSB), which provides this layer of infrastructure, you can go &lt;a href="https://www.tetrate.io/tetrate-service-bridge/" title="here" target="_blank" rel="noopener">here&lt;/a>
. TSB is built on the open source Istio with enhancements, it follows the concept of the above two open source projects, and also builds a management plane to support heterogeneous environments.&lt;/p>
&lt;p>As we can see, the Istio-based projects and the open source environment are booming and companies like Tetrate are doing useful jobs of productizing and making Istio available to all workloads.&lt;/p></description></item><item><title>The debate in the community about Istio and service mesh</title><link>https://sdmx.io/blog/the-debate-in-the-community-about-istio-and-service-mesh/</link><pubDate>Fri, 17 Dec 2021 16:43:27 +0800</pubDate><guid>https://sdmx.io/blog/the-debate-in-the-community-about-istio-and-service-mesh/</guid><description>
&lt;p>You can use Istio to do &lt;a href="https://www.tetrate.io/blog/multicluster-management-with-kubernetes-and-istio/" title="multi-cluster management" target="_blank" rel="noopener">multi-cluster management&lt;/a>
, &lt;a href="https://www.tetrate.io/blog/istio-servicemesh-api-gateway/" title="API Gateway" target="_blank" rel="noopener">API Gateway&lt;/a>
, and manage applications on Kubernetes or &lt;a href="https://www.tetrate.io/blog/istio-18-a-virtual-machine-integration-odyssey/" title="virtual machines" target="_blank" rel="noopener">virtual machines&lt;/a>
. In my &lt;a href="https://www.tetrate.io/blog/why-is-service-mesh-a-necessary-part-of-cloud-native/" title="last blog" target="_blank" rel="noopener">last blog&lt;/a>
, I talked about how service mesh is an integral part of cloud native applications. However, building infrastructure can be a big deal. There is no shortage of debate in the community about the practicability of service mesh and Istio– here’s a list of common questions and concerns, and how to address them.&lt;/p>
&lt;ul>
&lt;li>Is anyone using Istio in production?&lt;/li>
&lt;li>What is the impact on application performance due to the many resources consumed by injecting sidecar into the pod?&lt;/li>
&lt;li>Istio supports a limited number of protocols; is it scalable?&lt;/li>
&lt;li>Will Istio be manageable? – Or is it too complex, old services too costly to migrate, and the learning curve too steep?&lt;/li>
&lt;/ul>
&lt;p>I will answer each of these questions below.&lt;/p>
&lt;h3 id="istio-is-architecturally-stable-production-ready-and-ecologically-emerging">Istio is architecturally stable, production-ready, and ecologically emerging&lt;/h3>
&lt;p>&lt;a href="https://www.tetrate.io/blog/istio-wasm-extensions-and-ecosystem/" title="Istio 1.12" target="_blank" rel="noopener">Istio 1.12&lt;/a>
was just released in November – and has evolved significantly since the explosion of service mesh in 2018 (the year Istio co-founders established Tetrate). Istio has a large community of providers and &lt;a href="https://istio.io/latest/about/case-studies/" title="users" target="_blank" rel="noopener">users&lt;/a>
. The Istio SIG of Cloud Native Community has held eight &lt;a href="https://cloudnative.to/sig-istio/big-talk/overview.html" title="Istio Big Talk (Istio 大咖说)" target="_blank" rel="noopener">Istio Big Talk (Istio 大咖说)&lt;/a>
, with Baidu, Tencent, NetEase, Xiaohongshu(小红书), and Xiaodian Technology(小电科技) sharing their Istio practices. According to &lt;a href="https://www.cncf.io/wp-content/uploads/2020/11/CNCF_Survey_Report_2020.pdf" title="CNCF Survey Report 2020" target="_blank" rel="noopener">CNCF Survey Report 2020&lt;/a>
, about 50% of the companies surveyed are using a service mesh in production or planning to in the next year, and about half (47%) of organizations using a service mesh in production are using Istio.&lt;/p>
&lt;p>Many companies have developed extensions or plugins for Istio, such as Ant, NetEase, eBay, and Airbnb. Istio’s architecture has been stable since the 1.5 release, and the release cycle is fixed quarterly, with the current project’s main task being Day-2 Operations.&lt;/p>
&lt;p>The Istio community has also hosted various events, with the first IstioCon in March 2021, the Istio Meetup China in Beijing in July, and the Service Mesh Summit 2022 in Shanghai in January 2022.&lt;/p>
&lt;p>So we can say that the Istio architecture is stable and production-ready, and the ecosystem is budding.&lt;/p>
&lt;h3 id="the-impact-of-service-mesh-on-application-performance">The impact of service mesh on application performance&lt;/h3>
&lt;p>A service mesh uses iptables to do traffic hijacking by default to be transparent to applications. When the number of services is large, there are a lot of iptables rules that affect network performance. You can use techniques like &lt;a href="https://cloudnative.to/blog/how-ebpf-streamlines-the-service-mesh/" title="eBPF" target="_blank" rel="noopener">eBPF&lt;/a>
to provide application performance, but the method requires a high version of the operating system kernel, which few enterprises can achieve.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/the-debate-in-the-community-about-istio-and-service-mesh/008i3skNly1gxgyfcfm5oj30sg0djmxt.jpg" data-img="/blog/the-debate-in-the-community-about-istio-and-service-mesh/008i3skNly1gxgyfcfm5oj30sg0djmxt.jpg" data-width="1024" data-height="487" alt="008i3skNly1gxgyfcfm5oj30sg0djmxt.jpg" data-caption="Istio DNS">
&lt;figcaption>Istio DNS&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>In the early days, Istio distributed the routing information of all services in the mesh to all proxy sidecars, which caused &lt;a href="https://istio.io/latest/docs/reference/config/networking/sidecar/" title="sidecar" target="_blank" rel="noopener">sidecar&lt;/a>
s to take up a lot of resources. &lt;a href="https://github.com/aeraki-framework/aeraki" title="Aeraki" target="_blank" rel="noopener">Aeraki&lt;/a>
and &lt;a href="https://github.com/slime-io/slime" title="Slime" target="_blank" rel="noopener">Slime&lt;/a>
can achieve configuration lazy loading. We will introduce these two open-source projects in the Istio open-source ecosystem.&lt;/p>
&lt;p>Finally, there is a problem related to Sidecar proxy operation and maintenance: upgrading all Envoy proxies while ensuring constant traffic. A solution is using the &lt;a href="https://xie.infoq.cn/article/23ae6d3f0d0260b4797a708a0" title="SidecarSet" target="_blank" rel="noopener">SidecarSet&lt;/a>
resource in the open-source project &lt;a href="https://github.com/openkruise/kruise" title="OpenKruise" target="_blank" rel="noopener">OpenKruise&lt;/a>
.&lt;/p>
&lt;p>The resource consumption and network latency associated with the introduction of Sidecar are also within reasonable limits, as you can see from the &lt;a href="https://istio.io/latest/blog/2019/performance-best-practices/" title="service mesh benchmark performance tests" target="_blank" rel="noopener">service mesh benchmark performance tests&lt;/a>
.&lt;/p>
&lt;h3 id="extending-the-istio-service-mesh">Extending the Istio service mesh&lt;/h3>
&lt;p>The next question is about extending the Istio service mesh. The current solution given by the Istio community is to use &lt;a href="https://www.tetrate.io/blog/istio-wasm-extensions-and-ecosystem/" title="WebAssembly" target="_blank" rel="noopener">WebAssembly&lt;/a>
, an extension that is still relatively little used in production by now and has performance concerns. Most of the answers I’ve observed are CRDs that build a service mesh management plane based on Istio.&lt;/p>
&lt;p>Also, making Istio support heterogeneous environments for all workloads, such as virtual machines and containers, is in strong demand for end-users. It allows them to migrate applications from traditional loads to cloud native easily. Finally, hybrid cloud traffic management for multiple clusters and meshes is a more advanced requirement.&lt;/p>
&lt;h3 id="steep-learning-curve">Steep learning curve&lt;/h3>
&lt;p>Many people complain that Istio has too little learning material. Istio has been open source for four years, and there are a lot of learning resources now:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://istio.io/" title="Istio Documentation" target="_blank" rel="noopener">Istio Documentation&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://events.istio.io/istiocon-2021/" title="IstioCon 2021" target="_blank" rel="noopener">IstioCon 2021&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://github.com/tetratelabs/istio-weekly" title="Istio Big Talk/Istio Weekly" target="_blank" rel="noopener">Istio Big Talk/Istio Weekly&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://academy.tetrate.io/courses/istio-fundamentals" title="Istio Fundamentals Course" target="_blank" rel="noopener">Istio Fundamentals Course&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://academy.tetrate.io/courses/certified-istio-administrator" title="Certified Istio Administrator" target="_blank" rel="noopener">Certified Istio Administrator&lt;/a>
&lt;/li>
&lt;/ul>
&lt;p>Yes, Istio is complex, but it’s been getting more and more manageable with every release. In my next blog, I will introduce you to two open source projects that extend Istio and give you some insight into what’s going on in the Istio community.&lt;/p></description></item><item><title>Service Mesh - an integral part of cloud-native applications</title><link>https://sdmx.io/blog/service-mesh-an-integral-part-of-cloud-native-apps/</link><pubDate>Sun, 12 Dec 2021 16:43:27 +0800</pubDate><guid>https://sdmx.io/blog/service-mesh-an-integral-part-of-cloud-native-apps/</guid><description>
&lt;p>If you don’t know what Istio is, you can read my previous articles below:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.tetrate.io/blog/what-is-istio-and-why-does-kubernetes-need-it/" title="What Is Istio and Why Does Kubernetes Need it?" target="_blank" rel="noopener">What Is Istio and Why Does Kubernetes Need it?&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://www.tetrate.io/blog/why-do-you-need-istio-when-you-already-have-kubernetes/" title="Why do you need Istio when you already have Kubernetes?" target="_blank" rel="noopener">Why do you need Istio when you already have Kubernetes?&lt;/a>
&lt;/li>
&lt;/ul>
&lt;p>This article will explore the relationship between service mesh and cloud native.&lt;/p>
&lt;h3 id="service-mesh--the-product-of-the-container-orchestration-war">Service mesh – the product of the container orchestration war&lt;/h3>
&lt;p>If you’ve been following the cloud-native space since its early days, you’ll remember the container orchestration wars of 2015 to 2017. Kubernetes won the container wars in 2017, the idea of microservices had taken hold, and the trend toward containerization was unstoppable. Kubernetes architecture matured and slowly became boring, and service mesh technologies, represented by Linkerd and Istio, entered the CNCF-defined cloud-native critical technologies on the horizon.&lt;/p>
&lt;p>Kubernetes was designed with the concept of cloud-native in mind. A critical idea in cloud-native is the architectural design of microservices. When a single application is split into microservices, how can microservices be managed to ensure the SLA of the service as the number of services increases? The service mesh was born to solve this problem at the architectural level, free programmers’ creativity, and avoid tedious service discovery, monitoring, distributed tracing, and other matters.&lt;/p>
&lt;p>The service mesh takes the standard functionality of microservices down to the infrastructure layer, allowing developers to focus more on business logic and thus speed up service delivery, which is consistent with the whole idea of cloud-native. You no longer need to integrate bulky SDKs in your application, develop and maintain SDKs for different languages, and just use the service mesh for Day 2 operations after the application is deployed.&lt;/p>
&lt;p>The service mesh is regarded as the next generation of microservices. In the diagram, we can see that many of the concerns of microservices overlap with the functionality of Kubernetes. Kubernetes focuses on the application lifecycle, managing resources and deployments with little control over services. The service mesh fills this gap. The service mesh can connect, control, observe and protect microservices.&lt;/p>
&lt;h3 id="kubernetes-vs-xds-vs-istio">&lt;strong>Kubernetes vs. xDS vs. Istio&lt;/strong>&lt;/h3>
&lt;p>This diagram shows the layered architecture of Kubernetes and Istio.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxss9mamj30n90d73zs.jpg" data-img="/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxss9mamj30n90d73zs.jpg" data-width="837" data-height="475" alt="008i3skNly1gxgxss9mamj30n90d73zs.jpg" data-caption="img">
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>The diagram indicates that the kube-proxy settings are global and cannot be controlled at a granular level for each service. All Kubernetes can do is topology-aware routing, routing traffic closer to the Pod, and setting network policies in and out of the Pod.&lt;/p>
&lt;p>In contrast, the service mesh takes traffic control out of the service layer in Kubernetes through sidecar proxies, injects proxies into each Pod, and manipulates these distributed proxies through a control plane. It allows for more excellent resiliency.&lt;/p>
&lt;p>Kube-proxy implements traffic load balancing between multiple pod instances of a Kubernetes service. But how do you finely control the traffic between these services — such as dividing the traffic by percentage to different application versions (which are all part of the same service, but on other deployments), or doing canary releases and blue-green releases?&lt;/p>
&lt;p>The Kubernetes community gives a way to do canary releases using Deployment, assigning different pods to deployed services by modifying the pod’s label.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxsswmoij30sg0kl76r.jpg" data-img="/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxsswmoij30sg0kl76r.jpg" data-width="1024" data-height="741" alt="008i3skNly1gxgxsswmoij30sg0kl76r.jpg" data-caption="Envoy Architecture">
&lt;figcaption>Envoy Architecture&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Currently, the most popular open-source implementation of service mesh in the world is Istio. From the &lt;a href="https://www.cncf.io/wp-content/uploads/2020/11/CNCF_Survey_Report_2020.pdf" title="CNCF Survey Report 2020" target="_blank" rel="noopener">CNCF Survey Report 2020&lt;/a>
, we know that Istio is the most used service mesh in production today. Many companies have built their service mesh based on Istio, such as Ant, Airbnb, eBay, NetEase, Tencent, etc.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxstgg4qj30sg0gg0ts.jpg" data-img="/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxstgg4qj30sg0gg0ts.jpg" data-width="1024" data-height="592" alt="008i3skNly1gxgxstgg4qj30sg0gg0ts.jpg" data-caption="CNCF Survey Report 2020">
&lt;figcaption>CNCF Survey Report 2020&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Figure from &lt;a href="https://www.cncf.io/wp-content/uploads/2020/11/CNCF_Survey_Report_2020.pdf" title="CNCF Survey Report 2020" target="_blank" rel="noopener">CNCF Survey Report 2020&lt;/a>
&lt;/p>
&lt;p>Istio is developed based on Envoy, which has been used by default as its distributed proxy since the first day it was open-sourced. Envoy pioneered the creation of the xDS protocol for distributed gateway configuration, greatly simplifying the configuration of large-scale distributed networks. Ant Group open source MOSN also supported xDS In 2019. Envoy was also one of the first projects to graduate from CNCF, tested by large-scale production applications.&lt;/p>
&lt;h3 id="service-mesh--the-cloud-native-networking-infrastructure">Service mesh – the cloud-native networking infrastructure&lt;/h3>
&lt;p>With the above comparison between Kubernetes and service mesh in mind, we can see the place of service mesh in the cloud-native application architecture. That is, building a cloud-native network infrastructure specifically provides:&lt;/p>
&lt;ul>
&lt;li>Traffic management: controlling the flow of traffic and API calls between services, making calls more reliable, and enhancing network robustness in different environments.&lt;/li>
&lt;li>Observability: understanding the dependencies between services and the nature and flow of traffic between them provides the ability to identify problems quickly.&lt;/li>
&lt;li>Policy enforcement: controlling access policies between services by configuring the mesh rather than by changing the code.&lt;/li>
&lt;li>Service Identification and Security: providing service identifiability and security protection in the mesh.&lt;/li>
&lt;/ul></description></item><item><title>Using Istio service mesh as API Gateway</title><link>https://sdmx.io/blog/istio-servicemesh-api-gateway/</link><pubDate>Fri, 06 Aug 2021 10:22:00 +0800</pubDate><guid>https://sdmx.io/blog/istio-servicemesh-api-gateway/</guid><description>
&lt;p>API gateways have been around for a long time as the entry point for clients to access the back-end, mainly to manage “north-south” traffic, In recent years, service mesh architectures have become popular, mainly for managing internal systems,(i.e. “east-west” traffic), while a service mesh like Istio also has built-in gateways that bring traffic inside and outside the system under unified control. This often creates confusion for first-time users of Istio. What is the relationship between the service mesh and the API gateway? How does Istio’s gateway work? What are the ways to expose the services in the Istio mesh? This article gives you the answer.&lt;/p>
&lt;h2 id="key-insights">Key Insights&lt;/h2>
&lt;ul>
&lt;li>The service mesh was originally created to solve the problem of managing internal traffic for distributed systems, but API gateways existed long before it.&lt;/li>
&lt;li>While the Gateway is built into Istio, you can still use a custom Ingress Controller to proxy external traffic.&lt;/li>
&lt;li>API gateways and service mesh are converging.&lt;/li>
&lt;/ul>
&lt;h2 id="how-do-i-expose-services-in-the-istio-mesh">How do I expose services in the Istio mesh?&lt;/h2>
&lt;p>The following diagram shows four approaches to expose services in the Istio mesh using Istio Gateway, Kubernetes Ingress, API Gateway, and NodePort/LB.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-servicemesh-api-gateway/access-cluster.svg" data-img="/blog/istio-servicemesh-api-gateway/access-cluster.svg" alt="access-cluster.svg" data-caption="Exposing services through Istio Ingress Gateway">
&lt;figcaption>Exposing services through Istio Ingress Gateway&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>The Istio mesh is shaded, and the traffic in the mesh is internal (east-west) traffic, while the traffic from clients accessing services within the Kubernetes cluster is external (north-south) traffic.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Approach&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Controller&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Features&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>NodePort/LoadBalancer&lt;/td>
&lt;td>Kubernetes&lt;/td>
&lt;td>Load balancing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kubernetes Ingress&lt;/td>
&lt;td>Ingress controller&lt;/td>
&lt;td>Load balancing, TLS, virtual host, traffic routing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Istio Gateway&lt;/td>
&lt;td>Istio&lt;/td>
&lt;td>Load balancing, TLS, virtual host, advanced traffic routing, other advanced Istio features&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>API Gateway&lt;/td>
&lt;td>API Gateway&lt;/td>
&lt;td>Load balancing, TLS, virtual host, advanced traffic routing, API lifecycle management, billing, rate limiting, policy enforcement, data aggregation&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Since NodePort/LoadBalancer is a basic way to expose services built into Kubernetes, this article will not discuss that option. Each of the other three approaches will be described below.&lt;/p>
&lt;h2 id="using-kubernetes-ingress-to-expose-traffic">Using Kubernetes Ingress to expose traffic&lt;/h2>
&lt;p>We all know that clients of a Kubernetes cluster cannot directly access the IP address of a pod because the pod is in a network plane built into Kubernetes. We can expose services inside Kubernetes outside the cluster using NodePort or Load Balancer Kubernetes service type. To support virtual hosting, hiding and saving IP addresses, you can use Ingress resources to expose services in Kubernetes.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-servicemesh-api-gateway/ingress.svg" data-img="/blog/istio-servicemesh-api-gateway/ingress.svg" alt="ingress.svg" data-caption="Kubernetes Ingress to expose services">
&lt;figcaption>Kubernetes Ingress to expose services&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Ingress is a Kubernetes resource that controls the behavior of an ingress controller that does the traffic touring, which is the equivalent of a load-balanced directional proxy server such as Nginx, Apache, etc., which also includes rule definitions, i.e., routing information for URLs, which is provided by the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-controllers" title="Ingress controller" target="_blank" rel="noopener">Ingress controller&lt;/a>
.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kubernetes.io/ingress.class&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">istio&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpbin.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/status/*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpbin&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;em>kubernetes.io/ingress.class: istio&lt;/em> annotation in the example above indicates that the Ingress uses the Istio Ingress Controller which in fact uses Envoy proxy.&lt;/p>
&lt;h2 id="using-istio-gateway-to-expose-services">Using Istio Gateway to expose services&lt;/h2>
&lt;p>Istio is a popular service mesh implementation that has evolved from Kubernetes that implements some features that Kubernetes doesn’t. (See &lt;a href="https://www.tetrate.io/blog/what-is-istio-and-why-does-kubernetes-need-it/" title="What is Istio and why does Kubernetes need Istio?" target="_blank" rel="noopener">What is Istio and why does Kubernetes need Istio?&lt;/a>
) It makes traffic management transparent to the application, moving this functionality from the application to the platform layer and becoming a cloud-native infrastructure.&lt;/p>
&lt;p>Istio used Kubernetes Ingress as the traffic portal in versions prior to Istio 0.8, where Envoy was used as the Ingress Controller. From Istio 0.8 and later, Istio created the Gateway object. Gateway and VirtualService are used to represent the configuration model of Istio Ingress, and the default implementation of Istio Ingress uses the same Envoy proxy. In this way, the Istio control plane controls both the ingress gateway and the internal sidecar proxy with a consistent configuration model. These configurations include routing rules, policy enforcement, telemetry, and other service control functions.&lt;/p>
&lt;p>The Istio Gateway resources function similarly to the Kubernetes Ingress in that it is responsible for north-south traffic to and from the cluster. The Istio Gateway acts as a load balancer to carry connections to and from the edge of the service mesh. The specification describes a set of open ports and the protocols used by those ports, as well as the SNI configuration for load balancing, etc.&lt;/p>
&lt;p>The Istio Gateway resource itself can only be configured for L4 through L6, such as exposed ports, TLS settings, etc.; however, the Gateway can be bound to a VirtualService, where routing rules can be configured on L7, such as versioned traffic routing, fault injection, HTTP redirects, HTTP rewrites, and all other routing rules supported within the mesh.&lt;/p>
&lt;p>Below is an example of a Gateway binding to a VirtualService. The pod with the “istio: ingressgateway” label will act as the Ingress controller and route HTTP traffic to port 80 of the httpbin.example.com virtual host. The biggest difference between this and using Kubernetes Ingress is that it requires us to manually bind the VirtualService to the Gateway and specify the pod where the Gateway is located. This configuration is equivalent to opening up an entry point to Kubernetes for external access.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.istio.io/v1alpha3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpbin-gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">istio&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ingressgateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;httpbin.example.com&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The VirtualService below is bound to the gateway above via &lt;em>gateways&lt;/em> to accept traffic from that gateway.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.istio.io/v1alpha3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">VirtualService&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpbin&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;httpbin.example.com&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateways&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">httpbin-gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">match&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uri&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">prefix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/status&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">route&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">destination&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpbin&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="using-an-api-gateway">Using an API Gateway&lt;/h2>
&lt;p>API gateways are API management tools that sit between the client and the back-end service and are widely used in microservices as a way to separate the client interface from the back-end implementation. When a client makes a request, the API gateway breaks it down into multiple requests, then routes them to the correct location, generates a response, and keeps track of everything.&lt;/p>
&lt;p>The API Gateway is a special type of service in the microservices architecture that serves as the entry point for all microservices and is responsible for performing routing requests, protocol conversions, aggregating data, authentication, rate limiting, circuit breaking, and more. Most enterprise APIs are deployed through API Gateways, which typically handle common tasks across API service systems, such as TLS termination, authentication and authorization, rate limiting, and statistical information.&lt;/p>
&lt;p>There can be one or more API Gateways in the mesh. The responsibilities of the API Gateway are&lt;/p>
&lt;ul>
&lt;li>Request routing and version control&lt;/li>
&lt;li>Facilitating the transition of monolithic applications to microservices&lt;/li>
&lt;li>Permission authentication&lt;/li>
&lt;li>Data aggregation: monitoring and billing&lt;/li>
&lt;li>Protocol conversion&lt;/li>
&lt;li>Messaging and caching&lt;/li>
&lt;li>Security and alerting&lt;/li>
&lt;/ul>
&lt;p>Many of the above basic functions such as routing and permission authentication can also be achieved through Istio Gateway, but some mature API gateways may be more advantageous in terms of feature richness and scalability.&lt;/p>
&lt;ul>
&lt;li>The introduction of API Gateway requires consideration of the deployment, operation and maintenance, load balancing, and other scenarios of API Gateway itself, which increases the complexity of back-end services.&lt;/li>
&lt;li>An API Gateway carries a large number of interface adaptations, which makes it difficult to maintain.&lt;/li>
&lt;li>For some scenarios, the addition of a hop may lead to a reduction in performance.&lt;/li>
&lt;/ul>
&lt;p>Currently, some API Gateway imitations are building their own service mesh by deploying them in the sidecar.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In the Istio mesh, you can use a variety of Kubernetes Ingress Controllers to act as entry gateways, but of course, you can also use Istio’s built-in Istio Gateway directly, for policy control, traffic management, and usage monitoring. The advantage of this is that the gateway can be managed directly through Istio’s control plane, without the need for additional tools. But for functions such as API statement cycle management, complex billing, protocol conversion, and authentication, a traditional API gateway may be a better fit for you. So, you can choose according to your needs, or you can use a combination.&lt;/p>
&lt;p>Some traditional reverse proxies are also moving towards Service Mesh, such as Nginx with Nginx Service Mesh and Traefik with Traefik Mesh, and some API gateway products are also moving towards Service Mesh, such as Kong with Kuma, and in the future, we will see more convergence of API gateways, reverse proxies, and service meshes.&lt;/p></description></item><item><title>Multicluster Management with Kubernetes and Istio</title><link>https://sdmx.io/blog/multicluster-management-with-kubernetes-and-istio/</link><pubDate>Mon, 12 Jul 2021 22:22:00 +0800</pubDate><guid>https://sdmx.io/blog/multicluster-management-with-kubernetes-and-istio/</guid><description>
&lt;p>Do you have multiple Kubernetes clusters and a service mesh? Do your virtual machines and services in a Kubernetes cluster need to interact? This article will take you through the process and considerations of building a hybrid cloud using Kubernetes and an Istio Service Mesh. Together, Kubernetes and Istio can be used to bring hybrid workloads into a mesh and achieve interoperability for multicluster. But another layer of infrastructure — a management plane — is helpful for managing multicluster or multimesh deployments.&lt;/p>
&lt;h2 id="kubernetes">Kubernetes&lt;/h2>
&lt;p>Using Kubernetes enables rapid deployment of a distributed environment that enables cloud interoperability and unifies the control plane on the cloud. It also provides resource objects, such as Service, Ingress and &lt;a href="https://kubernetes.io/blog/2021/04/22/evolving-kubernetes-networking-with-the-gateway-api/" title="Gateway" target="_blank" rel="noopener">Gateway&lt;/a>
, to handle application traffic. The Kubernetes API Server communicates with the kube-proxy component on each node in the cluster, creates iptables rules for the node, and forwards requests to other pods.&lt;/p>
&lt;p>Assuming that a client now wants to access a service in Kubernetes, the request is first sent to the Ingress/Gateway, then forwarded to the backend service (Service A in the diagram below) based on the routing configuration in the Ingress/Gateway. Then Service A polls an instance of Service B for the traffic requested by Service B. Lastly, the traffic requested by Service A for Service B is polled forward to Service B’s instance.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/multicluster-management-with-kubernetes-and-istio/008i3skNly1gsgg6a11l1j31lu0u042s.jpg" data-img="/blog/multicluster-management-with-kubernetes-and-istio/008i3skNly1gsgg6a11l1j31lu0u042s.jpg" data-width="2082" data-height="1080" alt="008i3skNly1gsgg6a11l1j31lu0u042s.jpg" data-caption="Kubernetes">
&lt;figcaption>Kubernetes&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="kubernetes-multicluster">Kubernetes Multicluster&lt;/h2>
&lt;p>The most common usage scenarios for multicluster management include:&lt;/p>
&lt;ul>
&lt;li>service traffic load balancing&lt;/li>
&lt;li>isolating development and production environments&lt;/li>
&lt;li>decoupling data processing and data storage&lt;/li>
&lt;li>cross-cloud backup and disaster recovery&lt;/li>
&lt;li>flexible allocation of compute resources&lt;/li>
&lt;li>low-latency access to services across regions&lt;/li>
&lt;li>avoiding vendor lock-in&lt;/li>
&lt;/ul>
&lt;p>There are often multiple Kubernetes clusters within an enterprise; and the &lt;a href="https://github.com/kubernetes-sigs/kubefed" title="KubeFed" target="_blank" rel="noopener">KubeFed&lt;/a>
implementation of Kubernetes cluster federation developed by &lt;a href="https://github.com/kubernetes/community/blob/master/sig-multicluster/README.md" title="Multicluster SIG" target="_blank" rel="noopener">Multicluster SIG&lt;/a>
enables multicluster management capabilities, which allows all Kubernetes clusters to be managed through the same interface.&lt;/p>
&lt;p>There are several general issues that need to be addressed when using cluster federation:&lt;/p>
&lt;ul>
&lt;li>Configuring which clusters need to be federated&lt;/li>
&lt;li>API resources need to be propagated across the clusters&lt;/li>
&lt;li>Configuring how API resources are distributed to different clusters&lt;/li>
&lt;li>Registering DNS records in clusters to enable service discovery across clusters&lt;/li>
&lt;/ul>
&lt;p>The following is a multicluster architecture for &lt;a href="https://kubesphere.io/" title="KubeSphere" target="_blank" rel="noopener">KubeSphere&lt;/a>
— one of the most commonly used Kubernetes multicluster management architectures — where the Host Cluster serves as the control plane with two member clusters, West and East.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/multicluster-management-with-kubernetes-and-istio/008i3skNly1gsgg7a2ojvj31aa0u0491.jpg" data-img="/blog/multicluster-management-with-kubernetes-and-istio/008i3skNly1gsgg7a2ojvj31aa0u0491.jpg" data-width="1666" data-height="1080" alt="008i3skNly1gsgg7a2ojvj31aa0u0491.jpg" data-caption="Multicluster">
&lt;figcaption>Multicluster&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>The Host Cluster needs to be able to access the API Server of the Member Cluster, but the network connectivity between Member Clusters is not required. The Host Cluster is independent of the Member Cluster it manages and the Member Cluster is not aware of the existence of the Host Cluster. The advantage of this is that when the control plane fails, the Member Cluster will not be affected and the deployed load can still operate normally without being affected.&lt;/p>
&lt;p>The Host Cluster also assumes the role of API portal, and the Host Cluster forwards the resource requests to the Member Cluster — which is convenient for aggregation and also facilitates unified authority authentication. We see that there is a Federation Control Plane in the Host Cluster, where the Push Reconciler propagates the identity, role, and role binding from the Federation Cluster to all Member Clusters.&lt;/p>
&lt;h2 id="istio-service-mesh">Istio Service Mesh&lt;/h2>
&lt;p>Consider using the Istio service mesh when we have multilingual, multiversion microservices running in Kubernetes and need finer-grained canary publishing and unified security policy management for inter-service observability. Istio enables intelligent application-aware load balancing from the application layer to other Service Mesh-enabled services in the cluster, by transparently intercepting all traffic to and from the application using IPTables, and bypassing the primary kube-proxy load balancing. The Istio control plane communicates with the Kubernetes API Server to obtain information about all registered services in the cluster.&lt;/p>
&lt;p>The following diagram illustrates the basics of Istio, where all nodes belong to the same Kubernetes cluster.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/multicluster-management-with-kubernetes-and-istio/008i3skNly1gsgg6sdrk2j32v60u0qbb.jpg" data-img="/blog/multicluster-management-with-kubernetes-and-istio/008i3skNly1gsgg6sdrk2j32v60u0qbb.jpg" data-width="3714" data-height="1080" alt="008i3skNly1gsgg6sdrk2j32v60u0qbb.jpg" data-caption="Istio Service Mesh">
&lt;figcaption>Istio Service Mesh&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>You may end up with at least a few Kubernetes clusters, each hosting microservices. Multiple &lt;a href="https://istio.io/latest/docs/setup/install/multicluster/" title="deployment models" target="_blank" rel="noopener">deployment models&lt;/a>
exist for Istio’s multicluster deployments — depending on network isolation, primary and backup — which can be specified by declaration when deploying using Istio Operator. Communication between these microservices in a cluster can be enhanced by a service mesh. Within the cluster, Istio provides common communication patterns to improve resiliency, security and observability.&lt;/p>
&lt;p>All of the above is about application load management on Kubernetes, but for legacy applications on virtual machines: how can they be managed in the same plane? Istio supports applications on virtual machines, so why do we need a management plane?&lt;/p>
&lt;h2 id="management-plane">Management Plane&lt;/h2>
&lt;p>To manage gateways, traffic and security groupings, and apply them to different clusters and namespaces, you’ll need to add another layer of abstraction on top of Istio: a management plane. The diagram below shows the multitenant model of Tetrate Service Bridge (TSB). TSB uses Next Generation Access Control (NGAC) — a fine-grained authorization framework — to manage user access and also facilitate the construction of a zero-trust network.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/multicluster-management-with-kubernetes-and-istio/008i3skNly1gsgg8ndcajj31il0u00z9.jpg" data-img="/blog/multicluster-management-with-kubernetes-and-istio/008i3skNly1gsgg8ndcajj31il0u00z9.jpg" data-width="1965" data-height="1080" alt="008i3skNly1gsgg8ndcajj31il0u00z9.jpg" data-caption="Management Plane">
&lt;figcaption>Management Plane&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Istio provides workload identification, protected by strong mTLS encryption. This zero-trust model is better than trusting workloads based on topology information, such as source IP. A common control plane for multicluster management is built on top of Istio. Then a management plane is added to manage multiple clusters — providing multitenancy, management configuration, observability, and more.&lt;/p>
&lt;p>The diagram below shows the architecture of Tetrate Service Bridge.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/multicluster-management-with-kubernetes-and-istio/008i3skNly1gsgg951mknj314g0u0dnf.jpg" data-img="/blog/multicluster-management-with-kubernetes-and-istio/008i3skNly1gsgg951mknj314g0u0dnf.jpg" data-width="1456" data-height="1080" alt="008i3skNly1gsgg951mknj314g0u0dnf.jpg" data-caption="Tetrate Service Bridge">
&lt;figcaption>Tetrate Service Bridge&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Interoperability of heterogeneous clusters is achieved with Kubernetes. Istio brings containerized and virtual machine loads into a single control plane, to unify traffic, security and observability within the clusters. However, as the number of clusters, network environments and user permissions become more complex, there is a need to build another management plane above Istio’s control plane (for example, &lt;a href="https://www.tetrate.io/tetrate-service-bridge/" title="Tetrate Service Bridge" target="_blank" rel="noopener">Tetrate Service Bridge&lt;/a>
) for hybrid cloud management.&lt;/p></description></item><item><title>How to debug microservices in Kubernetes with proxy, sidecar or service mesh?</title><link>https://sdmx.io/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/</link><pubDate>Mon, 05 Jul 2021 22:22:00 +0800</pubDate><guid>https://sdmx.io/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/</guid><description>
&lt;p>Kubernetes is arguably the best environment for running microservices so far, but the experience of debugging microservices in a Kubernetes environment may not be as user-friendly. This article will show you how to debug microservices in Kubernetes, introduce common tools, and explain how the introduction of Istio impacts debugging microservices.&lt;/p>
&lt;h2 id="debugging-microservices-is-vastly-different-from-traditional-monolithic-applications">Debugging microservices is vastly different from traditional monolithic applications&lt;/h2>
&lt;p>The debugging of microservices has been a long-standing problem for software developers. This challenge does not exist in traditional monolithic applications because developers can leverage the debugger in IDEs to add breakpoints, modify environment variables, single-step execution, etc. for their applications, all of which provide great help in software debugging. With the popularity of Kubernetes, the debugging of microservices becomes a thorny issue, where the following issues are more complicated than the debugging of traditional monolithic applications.&lt;/p>
&lt;h3 id="multiple-dependencies">Multiple dependencies&lt;/h3>
&lt;p>A microservice often depends on multiple other microservices, some shared volumes across multiple microservices, and authorizations based on service accounts. When debugging a microservice, how do you deploy other dependent services to quickly build a latest set of staging environments?&lt;/p>
&lt;h3 id="access-from-a-local-machine">Access from a local machine&lt;/h3>
&lt;p>When microservices are running on a developer’s local computer, there is usually no direct access to the services in a Kubernetes cluster. How can you debug microservices deployed in a Kubernetes cluster as if they were local services?&lt;/p>
&lt;h3 id="slow-development-loop">Slow development loop&lt;/h3>
&lt;p>Usually, it takes a long process to update the code and build it into an image before pushing it to the cluster. How do you speed up the development cycle? Let’s look at the tools that address those challenges.&lt;/p>
&lt;h2 id="tools">Tools&lt;/h2>
&lt;p>The main solutions for debugging microservices in Kubernetes are:&lt;/p>
&lt;ul>
&lt;li>Proxy: by building a VPN, deploying a proxy in the Kubernetes cluster, and adding local debug endpoints to make the services in Kubernetes directly accessible to local applications, your architecture will look like [ local service ] &amp;lt;-&amp;gt; [ proxy ] &amp;lt;-&amp;gt; [ app in Kubernetes ].&lt;/li>
&lt;li>Sidecar: Inject a sidecar into the pod of the microservice to be debugged to intercept all traffic to and from the service, so that the service can be tracked and monitored, and the service can also be debugged in this sidecar.&lt;/li>
&lt;li>Service Mesh: To get an overall picture of the application, inject sidecars into all microservices so that you can get a dashboard that monitors global status.&lt;/li>
&lt;/ul>
&lt;p>Here are three typical open source projects that implement the above solutions, each of which can help you debug microservices from a different perspective. You can apply them at different stages of software development and they can be said to be complementary to each other.&lt;/p>
&lt;h3 id="proxy--debugging-microservices-with-telepresence">Proxy – debugging microservices with Telepresence&lt;/h3>
&lt;p>&lt;a href="https://www.telepresence.io/" title="Telepresence" target="_blank" rel="noopener">Telepresence&lt;/a>
is essentially a local proxy that proxies data volumes, environment variables, and networks in a Kubernetes cluster locally. The following diagram shows the main usage scenarios for Telepresence.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/telepresence.jpg" data-img="/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/telepresence.jpg" data-width="1080" data-height="1197" alt="telepresence.jpg" data-caption="Proxy mode: Telepresence">
&lt;figcaption>Proxy mode: Telepresence&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Users need to manually execute the telepresence command locally, which will automatically deploy the agent to Kubernetes. Once the agent has been deployed,&lt;/p>
&lt;ul>
&lt;li>Local services will have complete access to other services in the Kubernetes cluster, environment variables, Secret, ConfigMap, etc.&lt;/li>
&lt;li>Services in the cluster also have direct access to the locally exposed endpoints.&lt;/li>
&lt;/ul>
&lt;p>However, this approach requires users to run multiple commands while debugging locally, and in some network environments it may not be possible to establish a VPN connection to the Kubernetes cluster.&lt;/p>
&lt;h3 id="sidecar--debugging-microservices-with-nocalhost">Sidecar – debugging microservices with Nocalhost&lt;/h3>
&lt;p>&lt;a href="https://nocalhost.dev/" title="Nocalhost" target="_blank" rel="noopener">Nocalhost&lt;/a>
is a Kubernetes-based cloud development environment. To use it, you just need to install a plugin in your IDE – VS Code to extend Kubernetes and shorten the development feedback cycle. The development environment can be isolated by creating different namespaces for different users and using ServiceAccount when binding to different user corners. Nocalhost also provides a web console and API for administrators to manage different development environments.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/sidecar-nocalhost.jpg" data-img="/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/sidecar-nocalhost.jpg" data-width="1928" data-height="1080" alt="sidecar-nocalhost.jpg" data-caption="Sidecar mode: Nocalhost">
&lt;figcaption>Sidecar mode: Nocalhost&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>As long as you have a Kubernetes cluster and have admin rights to the cluster, you can refer to the &lt;a href="https://nocalhost.dev/getting-started/" title="Nocalhost documentation" target="_blank" rel="noopener">Nocalhost documentation&lt;/a>
to quickly start trying it out. To use the Nocalhost plugin in VS Code, you need to configure the Kubernetes cluster in the plugin first.&lt;/p>
&lt;ol>
&lt;li>Select the Kubeconfig file you just exported or copy and paste the contents of the file directly into the configuration.&lt;/li>
&lt;li>Then select the service you need to test and select the corresponding Dev Container. VS Code will automatically open a new code window.&lt;/li>
&lt;/ol>
&lt;p>Here is an example of the &lt;a href="https://istio.io/latest/docs/examples/bookinfo/" title="bookinfo sample" target="_blank" rel="noopener">bookinfo sample&lt;/a>
provided by Istio. You can open the cloned code in your local IDE and click the hammer next to the code file to enter development mode. Selecting the corresponding DevContainer and Nocalhost will automatically inject a development container sidecar into the pod and automatically enter the container in the terminal, as shown in the following figure.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/nocalhost-vs-code.jpg" data-img="/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/nocalhost-vs-code.jpg" data-width="1722" data-height="1080" alt="nocalhost-vs-code.jpg" data-caption="Nocalhost VS code">
&lt;figcaption>Nocalhost VS code&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>In development mode, the code is modified locally without rebuilding the image, and the remote development environment takes effect in real time, which can greatly accelerate the development speed. At the same time, Nocalhost also provides a server for managing the development environment and user rights, as shown in the following figure.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/nocalhost-web-admin.jpg" data-img="/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/nocalhost-web-admin.jpg" data-width="2354" data-height="1080" alt="nocalhost-web-admin.jpg" data-caption="Nocalhost Web">
&lt;figcaption>Nocalhost Web&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h3 id="service-mesh--debugging-microservices-with-istio">Service Mesh – debugging microservices with Istio&lt;/h3>
&lt;p>The above method of using proxy and sidecar can only debug one service at a time. You’ll need a mesh to get the global status of the application, such as the metrics of the service obtained, and debug the performance of the service by understanding the dependency and invocation process of the service through distributed tracing. These observability features need to be implemented by injecting sidecar uniformly for all services. And, when your services are in the process of migrating from VMs to Kubernetes, using Istio can bring VMs and Kubernetes into a single network plane (as shown below), making it easy for developers to debug and do incremental migrations.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/istio-service-mesh.jpg" data-img="/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/istio-service-mesh.jpg" data-width="1956" data-height="1080" alt="istio-service-mesh.jpg" data-caption="Serivce Mesh mode: Istio">
&lt;figcaption>Serivce Mesh mode: Istio&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Of course, these benefits do not come without a “cost.” With the introduction of Istio, your Kubernetes services will need to adhere to the Istio naming convention and you’ll need to know how to debug microservices using the Istioctl command line and logging.&lt;/p>
&lt;ul>
&lt;li>Use the &lt;em>istioctl analyze&lt;/em> command to debug the deployment of microservices in your cluster, and you can use YAML files to examine the deployment of resources in a namespace or across your cluster.&lt;/li>
&lt;li>Use &lt;em>istioctl proxy-config secret&lt;/em> to ensure that the secret of a pod in a service mesh is loaded correctly and is valid.&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In the process of microservicing applications and migrating from virtual machines to Kubernetes, developers need to make a lot of changes in their mindset and habits. By building a VPN between local and Kubernetes via proxy, developers can easily debug services in Kubernetes as if they were local services. By injecting a sidecar into the pod, you can achieve real-time debugging and speed up the development process. Finally, the Istio service mesh truly enables global observability, and you can also use tools like &lt;a href="https://www.tetrate.io/tetrate-service-bridge/" title="Tetrate Service Bridge" target="_blank" rel="noopener">Tetrate Service Bridge&lt;/a>
to manage heterogeneous platforms, helping you gradually move from monolithic applications to microservices.&lt;/p></description></item><item><title>Happy Istio 4th Anniversary -- Retrospect and Outlook</title><link>https://sdmx.io/blog/istio-4-year-birthday/</link><pubDate>Mon, 24 May 2021 08:00:00 +0800</pubDate><guid>https://sdmx.io/blog/istio-4-year-birthday/</guid><description>
&lt;p>Istio was named by &lt;a href="https://tetrate.io/" title="Tetrate" target="_blank" rel="noopener">Tetrate&lt;/a>
founder Varun Talwar and Google lead engineer Louis Ryan in 2017 and was open sourced on May 24, 2017. Today is the fourth anniversary of Istio’s open source arrival. Let’s take a look back at Istio’s four years of development — and look forward to Istio’s future.&lt;/p>
&lt;h3 id="istios-open-source-history">Istio’s open source history&lt;/h3>
&lt;p>In 2017, the year Kubernetes ended the container orchestration battle, Google took the opportunity to consolidate its dominance in the cloud native space and compensate for Kubernetes’ disadvantage in service-to-service traffic management by open-sourcing Istio. Istio released its 1.10 last week — but here are some of the most important releases in Istio’s history to date.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Date&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Version&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Note&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>May 24, 2017&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>Officially open source; established the architectural foundation of Control Plane, Data Plane and sidecar proxy.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>October 10, 2017&lt;/td>
&lt;td>0.2&lt;/td>
&lt;td>Started to support multiple runtime environments, such as virtual machines.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>June 1, 2018&lt;/td>
&lt;td>0.8&lt;/td>
&lt;td>API refactoring&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>July 31, 2018&lt;/td>
&lt;td>1.0&lt;/td>
&lt;td>Production-ready, after which the Istio team underwent a massive reorganization.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>March 19, 2019&lt;/td>
&lt;td>1.1&lt;/td>
&lt;td>Enterprise-ready. Support for multiple Kubernetes clusters, with performance optimizations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>March 3, 2020&lt;/td>
&lt;td>1.5&lt;/td>
&lt;td>Back to monolith, with microservice components merged into istiod, making Istio’s architecture cleaner and easier to maintain. Support for WebAssembly extension, making Istio’s ecology much stronger.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>November 18, 2020&lt;/td>
&lt;td>1.8&lt;/td>
&lt;td>Officially deprecated Mixer and focused on adding support for virtual machines.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>A year after its inception– and two months before the 1.0 release, version 0.8 was released with a massive refactoring of the API. In late July 2018, when 1.0 was released, Istio reached a production-ready tipping point. Since then, Google has massively reorganized the Istio team and several Istio-based service mesh startups were born, making 2018 the booming year of the service mesh industry.&lt;/p>
&lt;p>Istio 1.1 was released in March 2019, almost 9 months after 1.0 was released, which is far beyond the average release cycle of an open-source project. We know that the speed of iteration and evolution is a core competency of basic software. Since then, Istio has started a regular &lt;a href="https://istio.io/v1.7/about/release-cadence/" title="release cadence" target="_blank" rel="noopener">release cadence&lt;/a>
of one version per quarter and has become the &lt;a href="https://octoverse.github.com/#fastest-growing-oss-projects-by-contributors" title="#4 fastest growing project in GitHub’s top 10 in 2019" target="_blank" rel="noopener">#4 fastest growing project in GitHub’s top 10 in 2019&lt;/a>
!&lt;/p>
&lt;h3 id="the-istio-community">The Istio community&lt;/h3>
&lt;p>In 2020, Istio’s project management began to mature and its governance reached a stage of evolution. We saw the first &lt;a href="https://istio.io/latest/blog/2020/steering-election-results/" title="election" target="_blank" rel="noopener">election&lt;/a>
of a steering committee for the Istio community and the transfer of the trademark to &lt;a href="https://istio.io/latest/blog/2020/open-usage/" title="Open Usage Commons" target="_blank" rel="noopener">Open Usage Commons&lt;/a>
. The first &lt;a href="https://events.istio.io/istiocon-2021/" title="IstioCon" target="_blank" rel="noopener">IstioCon&lt;/a>
was successfully held in February 2021, with thousands of people attending the online conference. There is also a &lt;a href="https://www.youtube.com/watch?v=6m-rhyfy8sg&amp;amp;list=PL7wB27eZmdffS-g_xh7X-b0echc_XZMKV&amp;amp;index=8" title="large Istio community in China" target="_blank" rel="noopener">large Istio community in China&lt;/a>
, and face-to-face Istio community meetups will be held there in 2021. Stay tuned for more.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/istio-4-year-birthday/008i3skNly1gquicfqg14j31lw0smwl2.jpg" data-img="/blog/istio-4-year-birthday/008i3skNly1gquicfqg14j31lw0smwl2.jpg" data-width="2084" data-height="1030" alt="008i3skNly1gquicfqg14j31lw0smwl2.jpg" data-caption="">
&lt;figcaption>&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>According to the CNCF 2020 Survey, 46% of organizations were either using a service mesh in production or planning to use it in the next 12 months. Istio was the top used mesh among those using a mesh in production.&lt;/p>
&lt;h3 id="the-future">The future&lt;/h3>
&lt;p>After 4 years of development, there is not only a large user base around Istio, but also several Istio vendors, as you can see on the &lt;a href="https://istio.io/" title="homepage" target="_blank" rel="noopener">homepage&lt;/a>
of the recently revamped Istio website. In the last few releases, Istio has shifted its development focus to improving the Day 2 Operation experience. We also expect to see more Istio adoption path recommendations, case studies, learning materials, training, and certifications (such as the industry’s first &lt;a href="https://academy.tetrate.io/courses/certified-istio-administrator" title="Certified Istio Administrator" target="_blank" rel="noopener">Certified Istio Administrator&lt;/a>
from Tetrate) that will facilitate the adoption of Istio.&lt;/p></description></item><item><title>What Is Istio and Why Does Kubernetes Need it?</title><link>https://sdmx.io/blog/what-is-istio-and-why-does-kubernetes-need-it/</link><pubDate>Wed, 28 Apr 2021 09:06:14 +0800</pubDate><guid>https://sdmx.io/blog/what-is-istio-and-why-does-kubernetes-need-it/</guid><description>
&lt;p>Istio, &lt;a href="https://www.cncf.io/blog/2020/03/04/2019-cncf-survey-results-are-here-deployments-are-growing-in-size-and-speed-as-cloud-native-adoption-becomes-mainstream/" title="the most popular service mesh implementation" target="_blank" rel="noopener">the most popular service mesh implementation&lt;/a>
, was developed on top of Kubernetes and has a different niche in the cloud native application ecosystem than Kubernetes. Rather than introduce you directly to what Istio has to offer, this article will explain how Istio came about and what it is in relation to Kubernetes.&lt;/p>
&lt;h2 id="why-is-there-an-istio">Why Is There an Istio?&lt;/h2>
&lt;p>To explain what Istio is, it’s also important to understand the context in which Istio came into being — i.e., why is there an Istio?&lt;/p>
&lt;p>Microservices are a technical solution to an organizational problem. And Kubernetes/Istio are a technical solution to deal with the issues created by moving to microservices. As a deliverable for microservices, containers solve the problem of environmental consistency and allow for more granularity in limiting application resources. They are widely used as a vehicle for microservices.&lt;/p>
&lt;p>Google open-sourced Kubernetes in 2014, which grew exponentially over the next few years. It became a container scheduling tool to solve the deployment and scheduling problems of distributed applications — allowing you to treat many computers as though they were one computer. Because the resources of a single machine are limited and Internet applications may have traffic floods at different times (due to rapid expansion of user scale or different user attributes), the elasticity of computing resources needs to be high. A single machine obviously can’t meet the needs of a large-scale application; and conversely, it would be a huge waste for a very small-scale application to occupy the whole host.&lt;/p>
&lt;p>In short, Kubernetes defines the final state of the service and enables the system to reach and stay in that state automatically. So how do you manage the traffic on the service after the application has been deployed? Below we will look at how service management is done in Kubernetes and how it has changed in Istio.&lt;/p>
&lt;h2 id="how-do-you-do-service-management-in-kubernetes">How Do You Do Service Management in Kubernetes?&lt;/h2>
&lt;p>The following diagram shows the service model in Kubernetes:&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/what-is-istio-and-why-does-kubernetes-need-it/service-model.jpg" data-img="/blog/what-is-istio-and-why-does-kubernetes-need-it/service-model.jpg" data-width="1920" data-height="1200" alt="service-model.jpg" data-caption="Kubernetes Service Model">
&lt;figcaption>Kubernetes Service Model&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>From the above figure we can see that:&lt;/p>
&lt;ul>
&lt;li>Different instances of the same service may be scheduled to different nodes.&lt;/li>
&lt;li>Kubernetes combines multiple instances of a service through Service objects to unify external services.&lt;/li>
&lt;li>Kubernetes installs a kube-proxy component in each node to forward traffic, which has simple load balancing capabilities.&lt;/li>
&lt;li>Traffic from outside the Kubernetes cluster can enter the cluster via Ingress (Kubernetes has several other ways of exposing services; such as NodePort, LoadBalancer, etc.).&lt;/li>
&lt;/ul>
&lt;p>Kubernetes is used as a tool for intensive resource management. However, after allocating resources to the application, Kubernetes doesn’t fully solve the problems of how to ensure the robustness and redundancy of the application, how to achieve finer-grained traffic division (not based on the number of instances of the service), how to guarantee the security of the service, or how to manage multiple clusters, etc.&lt;/p>
&lt;h2 id="the-basics-of-istio">The Basics of Istio&lt;/h2>
&lt;p>The following diagram shows the service model in Istio, which supports both workloads and virtual machines in Kubernetes.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/what-is-istio-and-why-does-kubernetes-need-it/istio.jpg" data-img="/blog/what-is-istio-and-why-does-kubernetes-need-it/istio.jpg" data-width="1999" data-height="1104" alt="istio.jpg" data-caption="Istio">
&lt;figcaption>Istio&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>From the diagram we can see that:&lt;/p>
&lt;ul>
&lt;li>Istiod acts as the control plane, distributing the configuration to all sidecar proxies and gateways. (Note: for simplification, the connections between Istiod and sidecar are not drawn in the diagram.)&lt;/li>
&lt;li>Istio enables intelligent application-aware load balancing from the application layer to other mesh enabled services in the cluster, and bypasses the rudimentary kube-proxy load balancing.&lt;/li>
&lt;li>Application administrators can manipulate the behavior of traffic in the Istio mesh through a declarative API, in the same way they manage workloads in Kubernetes. It can take effects within seconds and they can do this without needing to redeploy.&lt;/li>
&lt;li>Ingress is replaced by Gateway resources, a special kind of proxy that is also a reused Sidecar proxy.&lt;/li>
&lt;li>A sidecar proxy can be installed in a virtual machine to bring the virtual machine into the Istio mesh.&lt;/li>
&lt;/ul>
&lt;p>In fact, before Istio one could use SpringCloud, Netflix OSS, and other tools to programmatically manage the traffic in an application, by integrating the SDK in the application. Istio makes traffic management transparent to the application, moving this functionality out of the application and into the platform layer as a cloud native infrastructure.&lt;/p>
&lt;p>Istio complements Kubernetes, by enhancing its traffic management, observability and security for cloud native applications. The service mesh open source project — launched in 2017 by Google, IBM and Lyft — has come a long way in three years. A description of Istio’s core features can be found in the &lt;a href="https://istio.io/latest/docs/concepts/what-is-istio/#core-features" title="Istio documentation" target="_blank" rel="noopener">Istio documentation&lt;/a>
.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>Service Mesh is the cloud native equivalent of TCP/IP, addressing application network communication, security and visibility issues.&lt;/li>
&lt;li>Istio is currently the most popular service mesh implementation, relying on Kubernetes but also scalable to virtual machine loads.&lt;/li>
&lt;li>Istio’s core consists of a control plane and a data plane, with Envoy as the default data-plane agent.&lt;/li>
&lt;li>Istio acts as the network layer of the cloud native infrastructure and is transparent to applications.&lt;/li>
&lt;/ul></description></item><item><title>Why Do You Need Istio When You Already Have Kubernetes?</title><link>https://sdmx.io/blog/why-do-you-need-istio-when-you-already-have-kubernetes/</link><pubDate>Wed, 07 Apr 2021 08:27:17 +0800</pubDate><guid>https://sdmx.io/blog/why-do-you-need-istio-when-you-already-have-kubernetes/</guid><description>
&lt;p>If you’ve heard of service mesh and tried &lt;a href="https://istio.io/" title="Istio" target="_blank" rel="noopener">Istio&lt;/a>
, you may have the following questions:&lt;/p>
&lt;ol>
&lt;li>Why is Istio running on Kubernetes?&lt;/li>
&lt;li>What is the role of Kubernetes and a service mesh in the cloud native application architecture, respectively?&lt;/li>
&lt;li>What aspects of Kubernetes does Istio extend? What problems does it solve?&lt;/li>
&lt;li>What is the relationship between Kubernetes, Envoy, and Istio?&lt;/li>
&lt;/ol>
&lt;p>This article will take you through the inner workings of Kubernetes and Istio. In addition, I will introduce the load balancing approach in Kubernetes, and explain why you need Istio when you have Kubernetes.&lt;/p>
&lt;p>Kubernetes is essentially about application lifecycle management through declarative configuration, while a service mesh is essentially about providing inter-application traffic, security management and observability. If you have already built a stable application platform using Kubernetes, how do you set up load balancing and traffic control for calls between services? This is where a service mesh comes into the picture.&lt;/p>
&lt;p>Envoy introduces the xDS protocol, which is supported by various open source software, such as &lt;a href="https://istio.io/" title="Istio" target="_blank" rel="noopener">Istio&lt;/a>
, &lt;a href="https://github.com/mosn/mosn" title="MOSN" target="_blank" rel="noopener">MOSN&lt;/a>
, etc. Envoy contributes xDS to a service mesh or cloud native infrastructure. Envoy is essentially a modern version of a proxy that can be configured through APIs, based on which many different usage scenarios are derived — such as API Gateway, sidecar proxy in service mesh, and edge proxy.&lt;/p>
&lt;p>This article contains the following:&lt;/p>
&lt;ul>
&lt;li>A description of the role of kube-proxy.&lt;/li>
&lt;li>The limitations of Kubernetes for microservice management.&lt;/li>
&lt;li>An introduction to the capabilities of Istio service mesh.&lt;/li>
&lt;li>A comparison of some of the concepts in Kubernetes, Envoy, and the Istio service mesh.&lt;/li>
&lt;/ul>
&lt;h2 id="kubernetes-vs-service-mesh">Kubernetes vs Service Mesh&lt;/h2>
&lt;p>The following diagram shows the service access relationship in Kubernetes and service mesh (one sidecar per pod model).&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/why-do-you-need-istio-when-you-already-have-kubernetes/008eGmZEly1gpb7knfo4dj31hk0redrz.jpg" data-img="/blog/why-do-you-need-istio-when-you-already-have-kubernetes/008eGmZEly1gpb7knfo4dj31hk0redrz.jpg" data-width="1928" data-height="986" alt="008eGmZEly1gpb7knfo4dj31hk0redrz.jpg" data-caption="Kubernetes vs Service Mesh">
&lt;figcaption>Kubernetes vs Service Mesh&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h3 id="traffic-forwarding">Traffic Forwarding&lt;/h3>
&lt;p>Each node in a Kubernetes cluster deploys a kube-proxy component that communicates with the Kubernetes API Server, gets information about the services in the cluster, and then sets iptables rules to send requests for service directly to the corresponding Endpoint (a pod belonging to the same group of services).&lt;/p>
&lt;h3 id="service-discovery">Service Discovery&lt;/h3>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/why-do-you-need-istio-when-you-already-have-kubernetes/008eGmZEly1gpb7knwb79j30kq0fcjs9.jpg" data-img="/blog/why-do-you-need-istio-when-you-already-have-kubernetes/008eGmZEly1gpb7knwb79j30kq0fcjs9.jpg" data-width="746" data-height="552" alt="008eGmZEly1gpb7knwb79j30kq0fcjs9.jpg" data-caption="Service Discovery">
&lt;figcaption>Service Discovery&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Istio can follow the service registration in Kubernetes and can also interface with other service discovery systems via platform adapters in the control plane; and then generate data plane configurations (using CRD, which are stored in etcd) with transparent proxies for the data plane. The transparent proxy of the data plane is deployed as a sidecar container in the pod of each application service, and all these proxies need to request the control plane to synchronize the proxy configuration. The proxy is “transparent” because the application container is completely unaware of the presence of the proxy. The kube-proxy component in the process needs to intercept traffic as well, except that the kube-proxy intercepts traffic to and from the Kubernetes node — while the sidecar proxy intercepts traffic to and from the pod.&lt;/p>
&lt;h3 id="disadvantages-of-a-service-mesh">Disadvantages of a Service Mesh&lt;/h3>
&lt;p>Since Kubernetes has many pods running on each node, putting the original kube-proxy route forwarding function in each pod will increase the response latency — due to more hops when the sidecar intercepts the traffic — and consume more resources. In order to manage traffic in a fine-grained manner, a series of new abstractions will be added. This will further increase the learning cost for users, but as the technology becomes more popular this situation will be slowly alleviated.&lt;/p>
&lt;h3 id="advantages-of-a-service-mesh">Advantages of a Service Mesh&lt;/h3>
&lt;p>The kube-proxy settings are global and cannot be controlled at a granular level for each service, while service mesh takes the traffic control out of the service layer in Kubernetes by means of sidecar proxy — allowing for more elasticity.&lt;/p>
&lt;h3 id="shortcomings-of-kube-proxy">Shortcomings of Kube-Proxy&lt;/h3>
&lt;p>First, it does not automatically try another pod if the forwarded pod is not serving properly. Each pod has a health check mechanism and when a pod has health problems, kubelet will restart the pod and kube-proxy will remove the corresponding forwarding rules. Also, nodePort-type services cannot add TLS or more complex message routing mechanisms.&lt;/p>
&lt;p>Kube-proxy implements load balancing of traffic across multiple pod instances of a Kubernetes service, but how do you do fine-grained control of traffic between these services — such as dividing traffic by percentage to different application versions (which are all part of the same service but on different deployments), or doing canary releases (grayscale releases) and blue-green releases?&lt;/p>
&lt;p>The Kubernetes community gives a way to &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#canary-deployments" title="do canary releases using Deployment" target="_blank" rel="noopener">do canary releases using Deployment&lt;/a>
, which is essentially a way to assign different pods to a deployment’s service by modifying the pod’s label.&lt;/p>
&lt;h2 id="kubernetes-ingress-vs-istio-gateway">Kubernetes Ingress vs. Istio Gateway&lt;/h2>
&lt;p>As mentioned above, kube-proxy can only route traffic within a Kubernetes cluster. The pods of a Kubernetes cluster are located in a network created by CNI. An ingress — a resource object created in Kubernetes — is created for communication outside the cluster. It’s driven by an ingress controller located on Kubernetes edge nodes responsible for managing north-south traffic. Ingress must be docked to various Ingress Controllers, such as the &lt;a href="https://github.com/kubernetes/ingress-nginx" title="nginx ingress controller" target="_blank" rel="noopener">nginx ingress controller&lt;/a>
and &lt;a href="https://traefik.io/" title="traefik" target="_blank" rel="noopener">traefik&lt;/a>
. Ingress is only applicable to HTTP traffic and is simple to use. It can only route traffic by matching a limited number of fields — such as service, port, HTTP path, etc. This makes it impossible to route TCP traffic such as MySQL, Redis, and various RPCs. This is why you see people writing nginx config language in ingress resource annotations.The only way to directly route north-south traffic is to use the service’s LoadBalancer or NodePort, the former requiring cloud vendor support and the latter requiring additional port management.&lt;/p>
&lt;p>Istio Gateway functions similarly to Kubernetes Ingress, in that it is responsible for north-south traffic to and from the cluster. Istio Gateway describes a load balancer for carrying connections to and from the edge of the mesh. The specification describes a set of open ports and the protocols used by those ports, the SNI configuration for load balancing, etc. Gateway is a CRD extension that also reuses the capabilities of the sidecar proxy; see the &lt;a href="https://istio.io/latest/docs/reference/config/networking/gateway/" title="Istio website" target="_blank" rel="noopener">Istio website&lt;/a>
for detailed configuration.&lt;/p>
&lt;h2 id="envoy">Envoy&lt;/h2>
&lt;p>Envoy is the default sidecar proxy in Istio. Istio extends its control plane based on Enovy’s xDS protocol. We need to familiarize ourselves with Envoy’s basic terminology before talking about Envoy’s xDS protocol. The following is a list of basic terms and their data structures in Envoy; please refer to the &lt;a href="https://envoyproxy.io/" title="Envoy documentation" target="_blank" rel="noopener">Envoy documentation&lt;/a>
for more details.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/why-do-you-need-istio-when-you-already-have-kubernetes/008eGmZEly1gpb7koah95j31450tetta.jpg" data-img="/blog/why-do-you-need-istio-when-you-already-have-kubernetes/008eGmZEly1gpb7koah95j31450tetta.jpg" data-width="1445" data-height="1058" alt="008eGmZEly1gpb7koah95j31450tetta.jpg" data-caption="Envoy">
&lt;figcaption>Envoy&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h3 id="basic-terminology">Basic Terminology&lt;/h3>
&lt;p>The following are the basic terms in Enovy that you should know.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Downstream&lt;/strong>: The downstream host connects to Envoy, sends the request, and receives the response; i.e., the host that sent the request.&lt;/li>
&lt;li>&lt;strong>Upstream&lt;/strong>: The upstream host receives connections and requests from Envoy and returns responses; i.e., the host that receives the requests.&lt;/li>
&lt;li>&lt;strong>Listener&lt;/strong>: Listener is a named network address (for example, port, UNIX domain socket, etc.); downstream clients can connect to these listeners. Envoy exposes one or more listeners to the downstream hosts to connect.&lt;/li>
&lt;li>&lt;strong>Cluster&lt;/strong>: A cluster is a group of logically identical upstream hosts to which Envoy connects. Envoy discovers the members of a cluster through service discovery. Optionally, the health status of cluster members can be determined through proactive health checks. Envoy decides which member of the cluster to route requests through a load balancing policy.&lt;/li>
&lt;/ul>
&lt;p>Multiple listeners can be set in Envoy, each listener can set a filter chain (filter chain table), and the filter is scalable so that we can more easily manipulate the behavior of traffic — such as setting encryption, private RPC, etc.&lt;/p>
&lt;p>The xDS protocol was proposed by Envoy and is the default sidecar proxy in Istio, but as long as the xDS protocol is implemented, it can theoretically be used as a sidecar proxy in Istio — such as the &lt;a href="https://github.com/mosn/mosn" title="MOSN" target="_blank" rel="noopener">MOSN&lt;/a>
open source by Ant Group.&lt;/p>
&lt;p>&lt;a href="https://cdn.thenewstack.io/media/2021/03/b800bf17-image3.png" title="&amp;lt;figure class=&amp;#34;mx-auto text-center&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;/blog/why-do-you-need-istio-when-you-already-have-kubernetes/008eGmZEly1gpb7kk7wk4j31060lqgqx.jpg&amp;#34; data-img=&amp;#34;/blog/why-do-you-need-istio-when-you-already-have-kubernetes/008eGmZEly1gpb7kk7wk4j31060lqgqx.jpg&amp;#34; data-width=&amp;#34;1302&amp;#34; data-height=&amp;#34;782&amp;#34; alt=&amp;#34;008eGmZEly1gpb7kk7wk4j31060lqgqx.jpg&amp;#34; data-caption=&amp;#34;img&amp;#34;&amp;gt;
&amp;lt;figcaption&amp;gt;img&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
" target="_blank" rel="noopener">&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/why-do-you-need-istio-when-you-already-have-kubernetes/008eGmZEly1gpb7kk7wk4j31060lqgqx.jpg" data-img="/blog/why-do-you-need-istio-when-you-already-have-kubernetes/008eGmZEly1gpb7kk7wk4j31060lqgqx.jpg" data-width="1302" data-height="782" alt="008eGmZEly1gpb7kk7wk4j31060lqgqx.jpg" data-caption="img">
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>
&lt;/a>
&lt;/p>
&lt;p>Istio is a very feature-rich service mesh that includes the following capabilities.&lt;/p>
&lt;ul>
&lt;li>Traffic Management: This is the most basic feature of Istio.&lt;/li>
&lt;li>Policy Control: Enables access control systems, telemetry capture, quota management, billing, etc.&lt;/li>
&lt;li>Observability: Implemented in the sidecar proxy.&lt;/li>
&lt;li>Security Authentication: The Citadel component does key and certificate management.&lt;/li>
&lt;/ul>
&lt;h2 id="traffic-management-in-istio">Traffic Management in Istio&lt;/h2>
&lt;p>The following CRDs are defined in Istio to help users with traffic management.&lt;/p>
&lt;ul>
&lt;li>Gateway: Gateway describes a load balancer that runs at the edge of the network and is used to receive incoming or outgoing HTTP/TCP connections.&lt;/li>
&lt;li>VirtualService: VirtualService actually connects the Kubernetes service to the Istio Gateway. It can also perform additional operations, such as defining a set of traffic routing rules to be applied when a host is addressed.&lt;/li>
&lt;li>DestinationRule: The policy defined by the DestinationRule determines the access policy for the traffic after it has been routed. Simply put, it defines how traffic is routed. Among others, these policies can be defined as load balancing configurations, connection pool sizes, and external detection (for identifying and expelling unhealthy hosts in the load balancing pool) configurations.&lt;/li>
&lt;li>EnvoyFilter: The EnvoyFilter object describes filters for proxy services that can customize the proxy configuration generated by Istio Pilot. This configuration is generally rarely used by primary users.&lt;/li>
&lt;li>ServiceEntry: By default, services in the Istio service mesh are unable to discover services outside of the Mesh. ServiceEntry enables additional entries to be added to the service registry inside Istio, thus allowing automatically discovered services in the mesh to access and route to these manually added services.&lt;/li>
&lt;/ul>
&lt;h2 id="kubernetes-vs-xds-vs-istio">Kubernetes vs. xDS vs. Istio&lt;/h2>
&lt;p>Having reviewed the abstraction of traffic management in Kubernetes’ kube-proxy component, xDS, and Istio, let’s look now at a comparison of the three components/protocols in terms of traffic management only (note that the three are not exactly equivalent).&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Kubernetes&lt;/strong>&lt;/th>
&lt;th>&lt;strong>xDS&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Istio service mesh&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Endpoint&lt;/td>
&lt;td>Endpoint&lt;/td>
&lt;td>WorkloadEntry&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Service&lt;/td>
&lt;td>Route&lt;/td>
&lt;td>VirtualService&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-proxy&lt;/td>
&lt;td>Route&lt;/td>
&lt;td>DestinationRule&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube-proxy&lt;/td>
&lt;td>Listener&lt;/td>
&lt;td>EnvoyFilter&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ingress&lt;/td>
&lt;td>Listener&lt;/td>
&lt;td>Gateway&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Service&lt;/td>
&lt;td>Cluster&lt;/td>
&lt;td>ServiceEntry&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="takeaways">Takeaways&lt;/h2>
&lt;ul>
&lt;li>The essence of Kubernetes is application lifecycle management, specifically deployment and management (scaling up and down, auto-recovery, release).&lt;/li>
&lt;li>Kubernetes provides a scalable and highly resilient deployment and management platform for microservices.&lt;/li>
&lt;li>A service mesh is based on transparent proxies that intercept traffic between services through sidecar proxies, and then manage the behavior of them through control plane configuration.&lt;/li>
&lt;li>A service mesh decouples traffic management from Kubernetes, eliminating the need for a kube-proxy component to support traffic within service mesh; and managing inter-service traffic, security and observability by providing an abstraction closer to the microservice application layer.&lt;/li>
&lt;li>xDS is one of the protocol standards for service mesh configuration.&lt;/li>
&lt;li>A service mesh is a higher-level abstraction of service in Kubernetes.&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>If the object managed by Kubernetes is a pod, then the object managed in service mesh is a service, so it’s just a matter of using Kubernetes to manage microservices and then applying service mesh. If you don’t even want to manage a service, then use a serverless platform like &lt;a href="https://knative.dev/" title="Knative" target="_blank" rel="noopener">Knative&lt;/a>
— but that’s an afterthought.&lt;/p></description></item><item><title>Cloud Native Sandbox</title><link>https://sdmx.io/blog/cloud-native-sandbox/</link><pubDate>Fri, 18 Jan 2019 19:06:14 +0800</pubDate><guid>https://sdmx.io/blog/cloud-native-sandbox/</guid><description>
&lt;p>Github: &lt;a href="https://github.com/rootsongjc/cloud-native-sandbox" title="https://github.com/rootsongjc/cloud-native-sandbox" target="_blank" rel="noopener">https://github.com/rootsongjc/cloud-native-sandbox&lt;/a>
&lt;/p>
&lt;p>Cloud Native Sandbox can help you setup a standalone Kubernetes and istio environment with Docker on you own laptop.&lt;/p>
&lt;p>The sandbox integrated with the following components:&lt;/p>
&lt;ul>
&lt;li>Kubernetes v1.10.3&lt;/li>
&lt;li>Istio v1.0.4&lt;/li>
&lt;li>Kubernetes dashboard v1.8.3&lt;/li>
&lt;/ul>
&lt;h2 id="differences-with-kubernetes-vagrant-centos-cluster">Differences with kubernetes-vagrant-centos-cluster&lt;/h2>
&lt;p>As I have created the &lt;a href="https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster" title="kubernetes-vagrant-centos-cluster" target="_blank" rel="noopener">kubernetes-vagrant-centos-cluster&lt;/a>
to set up a Kubernetes cluster and istio service mesh with &lt;code>vagrantfile&lt;/code> which consists of 1 master(also as node) and 3 nodes, but there is a big problem that it is so high weight and consume resources. So I made this light weight sandbox.&lt;/p>
&lt;p>&lt;strong>Features&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>No VirtualBox or Vagrantfile required&lt;/li>
&lt;li>Light weight&lt;/li>
&lt;li>High speed, low drag&lt;/li>
&lt;li>Easy to operate&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Services&lt;/strong>&lt;/p>
&lt;p>As the sandbox setup, you will get the following services.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Record with &lt;a href="https://github.com/nbedos/termtosvg" title="termtosvg" target="_blank" rel="noopener">termtosvg&lt;/a>
.&lt;/p>
&lt;h2 id="prerequisite">Prerequisite&lt;/h2>
&lt;p>You only need a laptop with Docker Desktop installed and &lt;a href="https://docs.docker.com/docker-for-mac/#kubernetes" title="Kubernetes enabled" target="_blank" rel="noopener">Kubernetes enabled&lt;/a>
.&lt;/p>
&lt;p>Note: Leave enough resources for Docker Desktop. At least 2 CPU, 4G memory.&lt;/p>
&lt;h2 id="install">Install&lt;/h2>
&lt;p>To start the sandbox, you have to run the following steps.&lt;/p>
&lt;h3 id="kubernetes-dashboardoptional">Kubernetes dashboard(Optional)&lt;/h3>
&lt;p>Install Kubernetes dashboard.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl apply -f install/dashbaord/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Get the dashboard token.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl -n kube-system describe secret default&lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;$1==&amp;#34;token:&amp;#34;{print $2}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Expose &lt;code>kubernetes-dashboard&lt;/code> service.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl -n kube-system get pod -l k8s-app&lt;span class="o">=&lt;/span>kubernetes-dashboard -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Login to Kubernetes dashboard on &lt;a href="http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login" title="http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login" target="_blank" rel="noopener">http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login&lt;/a>
with the above token.&lt;/p>
&lt;h3 id="istiorequired">Istio(Required)&lt;/h3>
&lt;p>Install istio service mesh with the default add-ons.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Install istio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl apply -f install/istio/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To expose service &lt;code>grafana&lt;/code> on &lt;a href="http://localhost:3000" title="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000&lt;/a>
.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl -n istio-system port-forward &lt;span class="k">$(&lt;/span>kubectl -n istio-system get pod -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>grafana -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> 3000:3000 &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To expose service &lt;code>prometheus&lt;/code> on &lt;a href="http://localhost:9090" title="http://localhost:9090" target="_blank" rel="noopener">http://localhost:9090&lt;/a>
.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl -n istio-system port-forward &lt;span class="k">$(&lt;/span>kubectl -n istio-system get pod -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>prometheus -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> 9090:9090 &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To expose service &lt;code>jaeger&lt;/code> on &lt;a href="http://localhost:16686" title="http://localhost:16686" target="_blank" rel="noopener">http://localhost:16686&lt;/a>
.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl -n istio-system port-forward &lt;span class="k">$(&lt;/span>kubectl -n istio-system get pod -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>jaeger -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> 16686:16686 &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To expose service &lt;code>servicegraph&lt;/code> on &lt;a href="http://localhost:8088/dotviz" title="http://localhost:8088/dotviz" target="_blank" rel="noopener">http://localhost:8088/dotviz&lt;/a>
, &lt;a href="http://localhost:8088/force/forcegraph.html" title="http://localhost:8088/force/forcegraph.html" target="_blank" rel="noopener">http://localhost:8088/force/forcegraph.html&lt;/a>
.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl -n istio-system port-forward &lt;span class="k">$(&lt;/span>kubectl -n istio-system get pod -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>servicegraph -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> 8088:8088 &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="kiali">Kiali&lt;/h3>
&lt;p>Install &lt;a href="https://www.kiali.io/" title="kiali" target="_blank" rel="noopener">kiali&lt;/a>
.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl -n istio-system apply -f install/kiali
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To expose service &lt;code>kiali&lt;/code> on &lt;a href="http://localhost:20001" title="http://localhost:20001" target="_blank" rel="noopener">http://localhost:20001&lt;/a>
.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl -n istio-system port-forward &lt;span class="k">$(&lt;/span>kubectl -n istio-system get pod -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>kiali -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> 20001:20001 &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="bookinfo-sample">Bookinfo sample&lt;/h2>
&lt;p>Deploy &lt;a href="https://istio.io/docs/examples/bookinfo/" title="bookinfo sample" target="_blank" rel="noopener">bookinfo sample&lt;/a>
.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Enable sidecar auto injection&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl label namespace default istio-injection&lt;span class="o">=&lt;/span>enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Deploy bookinfo sample&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl -n default apply -f sample/bookinfo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Visit &lt;code>productpage&lt;/code> on &lt;a href="http://localhost/productpage" title="http://localhost/productpage" target="_blank" rel="noopener">http://localhost/productpage&lt;/a>
.&lt;/p>
&lt;p>Let&amp;rsquo;s generate some loads.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span>i&amp;lt;1000&lt;span class="p">;&lt;/span>&lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>i+1&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Step-&amp;gt;&lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>curl http://localhost/productpage&lt;span class="p">;&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can watch the service status through &lt;a href="http://localhost:3000" title="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000&lt;/a>
.&lt;/p>
&lt;h2 id="client-tools">Client tools&lt;/h2>
&lt;p>To operate the applications on Kubernetes, you should install the following tools.&lt;/p>
&lt;p>&lt;strong>Required&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" title="kubectl" target="_blank" rel="noopener">kubectl&lt;/a>
- Deploy and manage applications on Kubernetes.&lt;/li>
&lt;li>&lt;a href="https://istio.io/docs/reference/commands/istioctl/" title="istioctl" target="_blank" rel="noopener">istioctl&lt;/a>
- Istio configuration command line utility.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Optional&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ahmetb/kubectx" title="kubectx" target="_blank" rel="noopener">kubectx&lt;/a>
- Switch faster between clusters and namespaces in kubectl&lt;/li>
&lt;li>&lt;a href="https://github.com/jonmosco/kube-ps1" title="kube-ps1" target="_blank" rel="noopener">kube-ps1&lt;/a>
- Kubernetes prompt info for bash and zsh&lt;/li>
&lt;/ul></description></item><item><title>Understanding How Envoy Sidecar Intercept and Route Traffic in Istio Service Mesh</title><link>https://sdmx.io/blog/understanding-how-envoy-sidecar-intercept-and-route-traffic-in-istio-service-mesh/</link><pubDate>Thu, 27 Dec 2018 10:01:22 +0800</pubDate><guid>https://sdmx.io/blog/understanding-how-envoy-sidecar-intercept-and-route-traffic-in-istio-service-mesh/</guid><description>
&lt;p>Updated at Mar 8, 2022&lt;/p>
&lt;p>This article uses Istio&amp;rsquo;s official &lt;a href="https://istio.io/latest/docs/examples/bookinfo/" title="bookinfo sample" target="_blank" rel="noopener">bookinfo sample&lt;/a>
to explain how Envoy performs routing forwarding after the traffic entering the Pod and forwarded to Envoy sidecar by iptables, detailing the inbound and outbound processing. For a detailed analysis of traffic interception, see &lt;a href="https://jimmysong.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/" title="Understanding Envoy Sidecar Proxy Injection and Traffic Interception in Istio Service Mesh" target="_blank" rel="noopener">Understanding Envoy Sidecar Proxy Injection and Traffic Interception in Istio Service Mesh&lt;/a>
.&lt;/p>
&lt;h2 id="overview-of-sidecar-injection-and-traffic-interception-steps">Overview of Sidecar Injection and Traffic Interception Steps&lt;/h2>
&lt;p>Below is an overview of the steps from Sidecar injection, Pod startup to Sidecar proxy interception traffic and Envoy processing routing.&lt;/p>
&lt;ol>
&lt;li>Kubernetes automatically injected through Admission Controller, or the user run &lt;code>istioctl&lt;/code> command to manually inject sidecar container.&lt;/li>
&lt;li>Apply the YAML configuration deployment application. At this time, the service creation configuration file received by the Kubernetes API server already includes the Init container and the sidecar proxy.&lt;/li>
&lt;li>Before the sidecar proxy container and application container are started, the Init container started firstly. The Init container is used to set iptables (the default traffic interception method in Istio, and can also use BPF, IPVS, etc.) to Intercept traffic entering the pod to Envoy sidecar Proxy. All TCP traffic (Envoy currently only supports TCP traffic) will be Intercepted by sidecar, and traffic from other protocols will be requested as originally.&lt;/li>
&lt;li>Launch the Envoy sidecar proxy and application container in the Pod.&lt;/li>
&lt;/ol>
&lt;div class="alert">
&lt;div class="alert-note py-1 px-2">
&lt;p>&lt;strong>Sidecar proxy and application container startup order issues&lt;/strong>&lt;/p>
&lt;p>Start the sidecar proxy and the application container. Which container is started first? Normally, Envoy Sidecar and the application container are all started up before receiving traffic requests. But we can&amp;rsquo;t predict which container will start first, so does the container startup order have an impact on Envoy hijacking traffic? The answer is yes, but it is divided into the following two situations.&lt;/p>
&lt;p>&lt;strong>Case 1: The application container starts first, and the sidecar proxy is still not ready&lt;/strong>&lt;/p>
&lt;p>In this case, the traffic is transferred to the 15001 port by iptables, and the port is not monitored in the Pod. The TCP link cannot be established and the request fails.&lt;/p>
&lt;p>&lt;strong>Case 2: Sidecar starts first, the request arrives and the application is still not ready&lt;/strong>&lt;/p>
&lt;p>In this case, the request will certainly fail. As for the step at which the failure begins, the reader is left to think.&lt;/p>
&lt;p>&lt;strong>Question&lt;/strong> : If adding a readiness and living probe for the sidecar proxy and application container can solve the problem?&lt;/p>
&lt;/div>
&lt;/div>
&lt;ol start="5">
&lt;li>TCP requests that are sent or received from the Pod will be hijacked by iptables. After the inbound traffic is hijacked, it is processed by the Inbound Handler and then forwarded to the application container for processing. The outbound traffic is hijacked by iptables and then forwarded to the Outbound Handler for processing. Upstream and Endpoint.&lt;/li>
&lt;li>Sidecar proxy requests Pilot to use the xDS protocol to synchronize Envoy configurations, including LDS, EDS, CDS, etc., but to ensure the order of updates, Envoy will use ADS to request configuration updates from Pilot directly.&lt;/li>
&lt;/ol>
&lt;h2 id="how-envoy-handles-route-forwarding">How Envoy handles route forwarding&lt;/h2>
&lt;p>The following figure shows a &lt;code>productpage&lt;/code>service access request &lt;code>http://reviews.default.svc.cluster.local:9080/&lt;/code>, when traffic enters &lt;code>reviews&lt;/code> the internal services, &lt;code>reviews&lt;/code> internal services Envoy Sidecar is how to do traffic blocked the route forward.&lt;/p>
&lt;p>&lt;figure class="mx-auto text-center">
&lt;img src="https://sdmx.io/blog/understanding-how-envoy-sidecar-intercept-and-route-traffic-in-istio-service-mesh/sidecar-iptables.webp" data-img="/blog/understanding-how-envoy-sidecar-intercept-and-route-traffic-in-istio-service-mesh/sidecar-iptables.webp" data-width="2968" data-height="1872" alt="sidecar-iptables.webp" data-caption="Istio transparent traffic hijacking and traffic routing schematic">
&lt;figcaption>Istio transparent traffic hijacking and traffic routing schematic&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Before the first step, &lt;code>productpage&lt;/code> Envoy Sidecar Pod has been selected by EDS of a request to &lt;code>reviews&lt;/code> a Pod service of its IP address, it sends a TCP connection request.&lt;/p>
&lt;p>The Envoy configuration in the official website of Istio is to describe the process of Envoy doing traffic forwarding. The party considering the traffic of the downstream is to receive the request sent by the downstream. You need to request additional services, such as &lt;code>reviews&lt;/code> service requests need Pod &lt;code>ratings&lt;/code> service.&lt;/p>
&lt;p>&lt;code>reviews&lt;/code>, there are three versions of the service, there is one instance of each version, three versions sidecar similar working steps, only to later &lt;code>reviews-v1-cb8655c75-b97zc&lt;/code> Sidecar flow Pod forwarding this step will be described.&lt;/p>
&lt;h2 id="understanding-the-inbound-handler">Understanding the Inbound Handler&lt;/h2>
&lt;p>The role of the inbound handler is to transfer the traffic from the downstream intercepted by iptables to localhost to establish a connection with the application container inside the Pod.&lt;/p>
&lt;p>Look &lt;code>reviews-v1-cb8655c75-b97zc&lt;/code> at the Listener in the pod.&lt;/p>
&lt;p>Run &lt;code>istioctl pc listener reviews-v1-cb8655c75-b97zc&lt;/code> to see what the Pod has a Listener.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="na">ADDRESS PORT TYPE &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">172.33.3.3 9080 HTTP &amp;lt;--- Receives all inbound traffic on 9080 from listener 0.0.0.0_15006&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.0.1 443 TCP &amp;lt;--+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.4.253 80 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.4.253 8080 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.109.182 443 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.22.50 15011 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.22.50 853 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.79.114 443 TCP | &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.143.179 15011 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.0.2 53 TCP | Receives outbound non-HTTP traffic for relevant IP:PORT pair from listener 0.0.0.0_15001&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.22.50 443 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.16.64 42422 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.127.202 16686 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.22.50 31400 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.22.50 8060 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.169.13 14267 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.169.13 14268 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.32.134 8443 TCP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">10.254.118.196 443 TCP &amp;lt;--+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15004 HTTP &amp;lt;--+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 8080 HTTP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15010 HTTP | &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 8088 HTTP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15031 HTTP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 9090 HTTP | &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 9411 HTTP | Receives outbound HTTP traffic for relevant port from listener 0.0.0.0_15001&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 80 HTTP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15030 HTTP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 9080 HTTP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 9093 HTTP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 3000 HTTP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 8060 HTTP |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 9091 HTTP &amp;lt;--+ &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">0.0.0.0 15006 TCP &amp;lt;--- Receives all inbound and outbound traffic to the pod from IP tables and hands over to virtual listener&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As from &lt;code>productpage&lt;/code> traffic arriving &lt;code>reviews&lt;/code> Pods, downstream must clearly know the IP address of the Pod which is &lt;code>172.33.3.3&lt;/code>, so the request is &lt;code>172.33.3.3:9080&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Virtual Listener&lt;/strong>&lt;/p>
&lt;p>As you can see from the Pod&amp;rsquo;s Listener list, the 0.0.0.0:15001/TCP Listener (the actual name is &lt;code>virtual&lt;/code>) listens for all inbound traffic, and the following is the detailed configuration of the Listener.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;virtual&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;socketAddress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;portValue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15006&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filterChains&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filters&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;envoy.tcp_proxy&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cluster&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;BlackHoleCluster&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;stat_prefix&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;BlackHoleCluster&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;useOriginalDst&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>UseOriginalDst&lt;/strong> : As can be seen from the configuration in &lt;code>useOriginalDst&lt;/code>the configuration as specified &lt;code>true&lt;/code>, which is a Boolean value, the default is false, using iptables redirect connections, the proxy may receive port &lt;a href="http://www.servicemesher.com/envoy/configuration/listener_filters/original_dst_filter.html" title="original destination address" target="_blank" rel="noopener">original destination address&lt;/a>
is not the same port, thus received at the proxy port It is 15001 and the original destination port is 9080. When this flag is set to true, the Listener redirects the connection to the Listener associated with the original destination address, here &lt;code>172.33.3.3:9080&lt;/code>. Listener If no relationship to the original destination address, the connection processing by the Listener to receive it, i.e. the &lt;code>virtual&lt;/code>Listener, after &lt;code>envoy.tcp_proxy&lt;/code>forwarded to a filter process &lt;code>BlackHoleCluster&lt;/code>, as the name implies, when no matching Envoy virtual listener when the effect of Cluster , will send the request to it and return 404. This will be referred to below Listener provided &lt;code>bindToPort&lt;/code> echoes.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong> : This parameter will be discarded, please use the Listener filter of the &lt;a href="http://www.servicemesher.com/envoy/configuration/listener_filters/original_dst_filter.html" title="original destination address" target="_blank" rel="noopener">original destination address&lt;/a>
instead. The main purpose of this parameter is: Envoy listens to the 15201 port to intercept the traffic intercepted by iptables via other Listeners instead of directly forwarding it. See the &lt;a href="https://zhaohuabing.com/post/2018-09-25-istio-traffic-management-impl-intro/#virtual-listener" title="Virtual Listener" target="_blank" rel="noopener">Virtual Listener&lt;/a>
for details .&lt;/p>
&lt;p>&lt;strong>Listener 172.33.3.3_9080&lt;/strong>&lt;/p>
&lt;p>As mentioned above, the traffic entering the inbound handler is &lt;code>virtual&lt;/code> transferred to the &lt;code>172.33.3.3_9080&lt;/code> Listener by the Listener. We are looking at the Listener configuration.&lt;/p>
&lt;p>Run &lt;code>istioctl pc listener reviews-v1-cb8655c75-b97zc --address 172.33.3.3 --port 9080 -o json&lt;/code> view.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;172.33.3.3_9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;socketAddress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;172.33.3.3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;portValue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">9080&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filterChains&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filterChainMatch&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;transportProtocol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;raw_buffer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filters&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;envoy.http_connection_manager&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;route_config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|9080||reviews.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;validate_clusters&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;virtual_hosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;domains&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|http|9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;routes&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cluster&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|9080||reviews.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;max_grpc_timeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.000s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;timeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.000s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;use_remote_address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>&lt;span class="err">，&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;deprecatedV1&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;bindToPort&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filterChainMatch&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;transportProtocol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;tls&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;tlsContext&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filters&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>bindToPort&lt;/strong> : Note that there are a &lt;a href="https://www.envoyproxy.io/docs/envoy/v1.6.0/api-v1/listeners/listeners" title="&amp;lt;code&amp;gt;bindToPort&amp;lt;/code&amp;gt;" target="_blank" rel="noopener">&lt;code>bindToPort&lt;/code>&lt;/a>
configuration that is &lt;code>false&lt;/code>, the default value of the configuration &lt;code>true&lt;/code>, showing Listener bind to the port, set here to &lt;code>false&lt;/code> the process flow can Listener Listener transferred from the other, i.e., above said &lt;code>virtual&lt;/code> Listener, where we see filterChains.filters in the &lt;code>envoy.http_connection_manager&lt;/code> configuration section:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;route_config&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|9080||reviews.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;validate_clusters&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;virtual_hosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;domains&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|http|9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;routes&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cluster&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|9080||reviews.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;max_grpc_timeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.000s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;timeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.000s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This configuration indicates that traffic will be handed off to the Cluster for &lt;code>inbound|9080||reviews.default.svc.cluster.local&lt;/code> processing.&lt;/p>
&lt;p>&lt;strong>Cluster &lt;code>inbound|9080||reviews.default.svc.cluster.local&lt;/code>&lt;/strong>&lt;/p>
&lt;p>Run &lt;code>istioctl pc cluster reviews-v1-cb8655c75-b97zc --fqdn reviews.default.svc.cluster.local --direction inbound -o json&lt;/code> to see the Cluster configuration is as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;inbound|9080||reviews.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;connectTimeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.000s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;hosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;socketAddress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;portValue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">9080&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;circuitBreakers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;thresholds&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can see that the Endpoint of the Cluster directly corresponds to localhost, and then the traffic is forwarded by the application container after iptables.&lt;/p>
&lt;h2 id="understanding-the-outbound-handler">Understanding the Outbound Handler&lt;/h2>
&lt;p>Because the &lt;code>reviews&lt;/code> will to &lt;code>ratings&lt;/code> send an HTTP request service, request address are: &lt;code>http://ratings.default.svc.cluster.local:9080/&lt;/code> the role of Outbound handler is to intercept traffic to iptables to native applications sent via Envoy to determine how to route to the upstream.&lt;/p>
&lt;p>The request sent by the application container is outbound traffic. After being hijacked by iptables, it is transferred to the Envoy Outbound handler for processing, then passed through &lt;code>virtual&lt;/code> Listener and &lt;code>0.0.0.0_9080&lt;/code> Listener, and then finds the cluster of upstream through Route 9080, and then finds Endpoint through EDS to perform routing action.&lt;/p>
&lt;p>&lt;strong>Route 9080&lt;/strong>&lt;/p>
&lt;p>&lt;code>reviews&lt;/code> requests &lt;code>ratings&lt;/code> service, run &lt;code>istioctl proxy-config routes reviews-v1-cb8655c75-b97zc --name 9080 -o json&lt;/code> view route configuration because Envoy VirtualHost will be matched according to HTTP header of domains, so the following list only &lt;code>ratings.default.svc.cluster.local:9080&lt;/code> this one VirtualHost.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster.local:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;domains&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster.local:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default.svc:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ratings.default:9080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;10.254.234.130&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;10.254.234.130:9080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;routes&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;match&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;prefix&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;route&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cluster&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;timeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.000s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;maxGrpcTimeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.000s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;decorator&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;operation&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ratings.default.svc.cluster.local:9080/*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;perFilterConfig&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">..&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can see the routing of traffic to the Cluster from this Virtual Host configuration &lt;code>outbound|9080||ratings.default.svc.cluster.local&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Endpoint &lt;code>outbound|9080||ratings.default.svc.cluster.local&lt;/code>&lt;/strong>&lt;/p>
&lt;p>Istio 1.1 previous versions do not support the use of &lt;code>istioctl&lt;/code> commands to directly query Endpoint Cluster, you can use the debug queries Pilot endpoint way compromise.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl &lt;span class="nb">exec&lt;/span> reviews-v1-cb8655c75-b97zc -c istio-proxy curl http://istio-pilot.istio-system.svc.cluster.local:9093/debug/edsz &amp;gt; endpoints.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>endpoints.json&lt;/code> file contains all the Endpoint information of the Cluster, and we only select &lt;code>outbound|9080||ratings.default.svc.cluster.local&lt;/code> the results of the Cluster as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;clusterName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;endpoints&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;locality&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;lbEndpoints&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;endpoint&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;socketAddress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;172.33.100.2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;portValue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">9080&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;metadata&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filterMetadata&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;istio&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;kubernetes://ratings-v1-8558d4458d-ns6lk.default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Endpoint can be one or more, and Envoy will route it according to certain rules by selecting the appropriate Endpoint.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong> : Istio 1.1 will support the &lt;code>istioctl pc endpoint&lt;/code> command to query Endpoint.&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://istio.io/latest/docs/ops/diagnostic-tools/proxy-cmd/" title="Debugging Envoy and Pilot - istio.io" target="_blank" rel="noopener">Debugging Envoy and Pilot - istio.io&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://jimmysong.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/" title="Understanding Envoy Agent Sidecar Injection and Traffic Interception in Istio Service Mesh - jimmysong.io" target="_blank" rel="noopener">Understanding Envoy Agent Sidecar Injection and Traffic Interception in Istio Service Mesh - jimmysong.io&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://zhaohuabing.com/post/2018-09-25-istio-traffic-management-impl-intro/" title="Istio traffic management implementation mechanism deep analysis - zhaohuabing.com" target="_blank" rel="noopener">Istio traffic management implementation mechanism deep analysis - zhaohuabing.com&lt;/a>
&lt;/li>
&lt;/ul></description></item></channel></rss>